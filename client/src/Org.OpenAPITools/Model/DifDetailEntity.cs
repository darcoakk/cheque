/*
 * Faktoring API - Test
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DifDetailEntity
    /// </summary>
    [DataContract(Name = "DifDetailEntity")]
    public partial class DifDetailEntity : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DifDetailEntity" /> class.
        /// </summary>
        /// <param name="temAltTipi">temAltTipi.</param>
        /// <param name="temAltTipiExp">temAltTipiExp.</param>
        /// <param name="diffKindExp">diffKindExp.</param>
        /// <param name="flow">flow.</param>
        /// <param name="diffKind">diffKind.</param>
        /// <param name="diffType">diffType.</param>
        /// <param name="diffTypeExp">diffTypeExp.</param>
        /// <param name="status">status.</param>
        /// <param name="statusExp">statusExp.</param>
        /// <param name="dayCount">dayCount.</param>
        /// <param name="lastUpdatingUserCode">lastUpdatingUserCode.</param>
        /// <param name="lastUpdatingDate">lastUpdatingDate.</param>
        /// <param name="diffLevel">diffLevel.</param>
        /// <param name="authority">authority.</param>
        /// <param name="authorityTitle">authorityTitle.</param>
        /// <param name="authorityTitleExp">authorityTitleExp.</param>
        /// <param name="authorityDep">authorityDep.</param>
        /// <param name="amount">amount.</param>
        public DifDetailEntity(string temAltTipi = default(string), string temAltTipiExp = default(string), string diffKindExp = default(string), string flow = default(string), string diffKind = default(string), string diffType = default(string), string diffTypeExp = default(string), string status = default(string), string statusExp = default(string), int dayCount = default(int), string lastUpdatingUserCode = default(string), string lastUpdatingDate = default(string), int diffLevel = default(int), string authority = default(string), string authorityTitle = default(string), string authorityTitleExp = default(string), string authorityDep = default(string), double amount = default(double))
        {
            this.TemAltTipi = temAltTipi;
            this.TemAltTipiExp = temAltTipiExp;
            this.DiffKindExp = diffKindExp;
            this.Flow = flow;
            this.DiffKind = diffKind;
            this.DiffType = diffType;
            this.DiffTypeExp = diffTypeExp;
            this.Status = status;
            this.StatusExp = statusExp;
            this.DayCount = dayCount;
            this.LastUpdatingUserCode = lastUpdatingUserCode;
            this.LastUpdatingDate = lastUpdatingDate;
            this.DiffLevel = diffLevel;
            this.Authority = authority;
            this.AuthorityTitle = authorityTitle;
            this.AuthorityTitleExp = authorityTitleExp;
            this.AuthorityDep = authorityDep;
            this.Amount = amount;
        }

        /// <summary>
        /// Gets or Sets TemAltTipi
        /// </summary>
        [DataMember(Name = "TemAltTipi", EmitDefaultValue = true)]
        public string TemAltTipi { get; set; }

        /// <summary>
        /// Gets or Sets TemAltTipiExp
        /// </summary>
        [DataMember(Name = "TemAltTipiExp", EmitDefaultValue = true)]
        public string TemAltTipiExp { get; set; }

        /// <summary>
        /// Gets or Sets DiffKindExp
        /// </summary>
        [DataMember(Name = "DiffKindExp", EmitDefaultValue = true)]
        public string DiffKindExp { get; set; }

        /// <summary>
        /// Gets or Sets Flow
        /// </summary>
        [DataMember(Name = "Flow", EmitDefaultValue = true)]
        public string Flow { get; set; }

        /// <summary>
        /// Gets or Sets DiffKind
        /// </summary>
        [DataMember(Name = "DiffKind", EmitDefaultValue = true)]
        public string DiffKind { get; set; }

        /// <summary>
        /// Gets or Sets DiffType
        /// </summary>
        [DataMember(Name = "DiffType", EmitDefaultValue = true)]
        public string DiffType { get; set; }

        /// <summary>
        /// Gets or Sets DiffTypeExp
        /// </summary>
        [DataMember(Name = "DiffTypeExp", EmitDefaultValue = true)]
        public string DiffTypeExp { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusExp
        /// </summary>
        [DataMember(Name = "StatusExp", EmitDefaultValue = true)]
        public string StatusExp { get; set; }

        /// <summary>
        /// Gets or Sets DayCount
        /// </summary>
        [DataMember(Name = "DayCount", EmitDefaultValue = false)]
        public int DayCount { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdatingUserCode
        /// </summary>
        [DataMember(Name = "LastUpdatingUserCode", EmitDefaultValue = true)]
        public string LastUpdatingUserCode { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdatingDate
        /// </summary>
        [DataMember(Name = "LastUpdatingDate", EmitDefaultValue = true)]
        public string LastUpdatingDate { get; set; }

        /// <summary>
        /// Gets or Sets DiffLevel
        /// </summary>
        [DataMember(Name = "DiffLevel", EmitDefaultValue = false)]
        public int DiffLevel { get; set; }

        /// <summary>
        /// Gets or Sets Authority
        /// </summary>
        [DataMember(Name = "Authority", EmitDefaultValue = true)]
        public string Authority { get; set; }

        /// <summary>
        /// Gets or Sets AuthorityTitle
        /// </summary>
        [DataMember(Name = "AuthorityTitle", EmitDefaultValue = true)]
        public string AuthorityTitle { get; set; }

        /// <summary>
        /// Gets or Sets AuthorityTitleExp
        /// </summary>
        [DataMember(Name = "AuthorityTitleExp", EmitDefaultValue = true)]
        public string AuthorityTitleExp { get; set; }

        /// <summary>
        /// Gets or Sets AuthorityDep
        /// </summary>
        [DataMember(Name = "AuthorityDep", EmitDefaultValue = true)]
        public string AuthorityDep { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DifDetailEntity {\n");
            sb.Append("  TemAltTipi: ").Append(TemAltTipi).Append("\n");
            sb.Append("  TemAltTipiExp: ").Append(TemAltTipiExp).Append("\n");
            sb.Append("  DiffKindExp: ").Append(DiffKindExp).Append("\n");
            sb.Append("  Flow: ").Append(Flow).Append("\n");
            sb.Append("  DiffKind: ").Append(DiffKind).Append("\n");
            sb.Append("  DiffType: ").Append(DiffType).Append("\n");
            sb.Append("  DiffTypeExp: ").Append(DiffTypeExp).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusExp: ").Append(StatusExp).Append("\n");
            sb.Append("  DayCount: ").Append(DayCount).Append("\n");
            sb.Append("  LastUpdatingUserCode: ").Append(LastUpdatingUserCode).Append("\n");
            sb.Append("  LastUpdatingDate: ").Append(LastUpdatingDate).Append("\n");
            sb.Append("  DiffLevel: ").Append(DiffLevel).Append("\n");
            sb.Append("  Authority: ").Append(Authority).Append("\n");
            sb.Append("  AuthorityTitle: ").Append(AuthorityTitle).Append("\n");
            sb.Append("  AuthorityTitleExp: ").Append(AuthorityTitleExp).Append("\n");
            sb.Append("  AuthorityDep: ").Append(AuthorityDep).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
