/*
 * Faktoring API - Test
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AdresDetay
    /// </summary>
    [DataContract(Name = "AdresDetay")]
    public partial class AdresDetay : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdresDetay" /> class.
        /// </summary>
        /// <param name="adres">adres.</param>
        /// <param name="ulkeId">ulkeId.</param>
        /// <param name="ulkeAdi">ulkeAdi.</param>
        /// <param name="ilId">ilId.</param>
        /// <param name="ilAdi">ilAdi.</param>
        /// <param name="ilceId">ilceId.</param>
        /// <param name="ilceAdi">ilceAdi.</param>
        public AdresDetay(string adres = default(string), string ulkeId = default(string), string ulkeAdi = default(string), string ilId = default(string), string ilAdi = default(string), string ilceId = default(string), string ilceAdi = default(string))
        {
            this.Adres = adres;
            this.UlkeId = ulkeId;
            this.UlkeAdi = ulkeAdi;
            this.IlId = ilId;
            this.IlAdi = ilAdi;
            this.IlceId = ilceId;
            this.IlceAdi = ilceAdi;
        }

        /// <summary>
        /// Gets or Sets Adres
        /// </summary>
        [DataMember(Name = "adres", EmitDefaultValue = true)]
        public string Adres { get; set; }

        /// <summary>
        /// Gets or Sets UlkeId
        /// </summary>
        [DataMember(Name = "ulkeId", EmitDefaultValue = true)]
        public string UlkeId { get; set; }

        /// <summary>
        /// Gets or Sets UlkeAdi
        /// </summary>
        [DataMember(Name = "ulkeAdi", EmitDefaultValue = true)]
        public string UlkeAdi { get; set; }

        /// <summary>
        /// Gets or Sets IlId
        /// </summary>
        [DataMember(Name = "ilId", EmitDefaultValue = true)]
        public string IlId { get; set; }

        /// <summary>
        /// Gets or Sets IlAdi
        /// </summary>
        [DataMember(Name = "ilAdi", EmitDefaultValue = true)]
        public string IlAdi { get; set; }

        /// <summary>
        /// Gets or Sets IlceId
        /// </summary>
        [DataMember(Name = "ilceId", EmitDefaultValue = true)]
        public string IlceId { get; set; }

        /// <summary>
        /// Gets or Sets IlceAdi
        /// </summary>
        [DataMember(Name = "ilceAdi", EmitDefaultValue = true)]
        public string IlceAdi { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdresDetay {\n");
            sb.Append("  Adres: ").Append(Adres).Append("\n");
            sb.Append("  UlkeId: ").Append(UlkeId).Append("\n");
            sb.Append("  UlkeAdi: ").Append(UlkeAdi).Append("\n");
            sb.Append("  IlId: ").Append(IlId).Append("\n");
            sb.Append("  IlAdi: ").Append(IlAdi).Append("\n");
            sb.Append("  IlceId: ").Append(IlceId).Append("\n");
            sb.Append("  IlceAdi: ").Append(IlceAdi).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
