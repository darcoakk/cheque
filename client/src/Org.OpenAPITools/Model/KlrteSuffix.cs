/*
 * Faktoring API - Test
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// KlrteSuffix
    /// </summary>
    [DataContract(Name = "KlrteSuffix")]
    public partial class KlrteSuffix : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KlrteSuffix" /> class.
        /// </summary>
        /// <param name="accountBranchCode">accountBranchCode.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="accountSuffix">accountSuffix.</param>
        /// <param name="accountCurrencyCode">accountCurrencyCode.</param>
        /// <param name="accountProductCode">accountProductCode.</param>
        /// <param name="amount">amount.</param>
        /// <param name="currencyType">currencyType.</param>
        /// <param name="maturityDate">maturityDate.</param>
        /// <param name="account">account.</param>
        public KlrteSuffix(int accountBranchCode = default(int), int accountNumber = default(int), int accountSuffix = default(int), string accountCurrencyCode = default(string), string accountProductCode = default(string), double amount = default(double), string currencyType = default(string), string maturityDate = default(string), string account = default(string))
        {
            this.AccountBranchCode = accountBranchCode;
            this.AccountNumber = accountNumber;
            this.AccountSuffix = accountSuffix;
            this.AccountCurrencyCode = accountCurrencyCode;
            this.AccountProductCode = accountProductCode;
            this.Amount = amount;
            this.CurrencyType = currencyType;
            this.MaturityDate = maturityDate;
            this.Account = account;
        }

        /// <summary>
        /// Gets or Sets AccountBranchCode
        /// </summary>
        [DataMember(Name = "AccountBranchCode", EmitDefaultValue = false)]
        public int AccountBranchCode { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name = "AccountNumber", EmitDefaultValue = false)]
        public int AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets AccountSuffix
        /// </summary>
        [DataMember(Name = "AccountSuffix", EmitDefaultValue = false)]
        public int AccountSuffix { get; set; }

        /// <summary>
        /// Gets or Sets AccountCurrencyCode
        /// </summary>
        [DataMember(Name = "AccountCurrencyCode", EmitDefaultValue = true)]
        public string AccountCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets AccountProductCode
        /// </summary>
        [DataMember(Name = "AccountProductCode", EmitDefaultValue = true)]
        public string AccountProductCode { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyType
        /// </summary>
        [DataMember(Name = "CurrencyType", EmitDefaultValue = true)]
        public string CurrencyType { get; set; }

        /// <summary>
        /// Gets or Sets MaturityDate
        /// </summary>
        [DataMember(Name = "MaturityDate", EmitDefaultValue = true)]
        public string MaturityDate { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name = "Account", EmitDefaultValue = true)]
        public string Account { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KlrteSuffix {\n");
            sb.Append("  AccountBranchCode: ").Append(AccountBranchCode).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountSuffix: ").Append(AccountSuffix).Append("\n");
            sb.Append("  AccountCurrencyCode: ").Append(AccountCurrencyCode).Append("\n");
            sb.Append("  AccountProductCode: ").Append(AccountProductCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CurrencyType: ").Append(CurrencyType).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
