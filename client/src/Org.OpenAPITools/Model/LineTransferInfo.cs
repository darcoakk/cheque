/*
 * Faktoring API - Test
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LineTransferInfo
    /// </summary>
    [DataContract(Name = "LineTransferInfo")]
    public partial class LineTransferInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LineTransferInfo" /> class.
        /// </summary>
        /// <param name="usedTransferFlag">usedTransferFlag.</param>
        /// <param name="takerRisk">takerRisk.</param>
        /// <param name="takerLineNo">takerLineNo.</param>
        /// <param name="takerCurrencyCode">takerCurrencyCode.</param>
        /// <param name="limitCurrencyCode">limitCurrencyCode.</param>
        public LineTransferInfo(string usedTransferFlag = default(string), double takerRisk = default(double), int takerLineNo = default(int), string takerCurrencyCode = default(string), string limitCurrencyCode = default(string))
        {
            this.UsedTransferFlag = usedTransferFlag;
            this.TakerRisk = takerRisk;
            this.TakerLineNo = takerLineNo;
            this.TakerCurrencyCode = takerCurrencyCode;
            this.LimitCurrencyCode = limitCurrencyCode;
        }

        /// <summary>
        /// Gets or Sets UsedTransferFlag
        /// </summary>
        [DataMember(Name = "UsedTransferFlag", EmitDefaultValue = true)]
        public string UsedTransferFlag { get; set; }

        /// <summary>
        /// Gets or Sets TakerRisk
        /// </summary>
        [DataMember(Name = "TakerRisk", EmitDefaultValue = false)]
        public double TakerRisk { get; set; }

        /// <summary>
        /// Gets or Sets TakerLineNo
        /// </summary>
        [DataMember(Name = "TakerLineNo", EmitDefaultValue = false)]
        public int TakerLineNo { get; set; }

        /// <summary>
        /// Gets or Sets TakerCurrencyCode
        /// </summary>
        [DataMember(Name = "TakerCurrencyCode", EmitDefaultValue = true)]
        public string TakerCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets LimitCurrencyCode
        /// </summary>
        [DataMember(Name = "LimitCurrencyCode", EmitDefaultValue = true)]
        public string LimitCurrencyCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LineTransferInfo {\n");
            sb.Append("  UsedTransferFlag: ").Append(UsedTransferFlag).Append("\n");
            sb.Append("  TakerRisk: ").Append(TakerRisk).Append("\n");
            sb.Append("  TakerLineNo: ").Append(TakerLineNo).Append("\n");
            sb.Append("  TakerCurrencyCode: ").Append(TakerCurrencyCode).Append("\n");
            sb.Append("  LimitCurrencyCode: ").Append(LimitCurrencyCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
