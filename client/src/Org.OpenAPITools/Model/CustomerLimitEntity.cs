/*
 * Faktoring API - Test
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CustomerLimitEntity
    /// </summary>
    [DataContract(Name = "CustomerLimitEntity")]
    public partial class CustomerLimitEntity : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerLimitEntity" /> class.
        /// </summary>
        /// <param name="offerReference">offerReference.</param>
        /// <param name="typeName">typeName.</param>
        /// <param name="currencyName">currencyName.</param>
        /// <param name="existingRisk">existingRisk.</param>
        /// <param name="existingLimit">existingLimit.</param>
        /// <param name="referenceLimitFlag">referenceLimitFlag.</param>
        /// <param name="blockageAmount">blockageAmount.</param>
        /// <param name="currentExposure">currentExposure.</param>
        /// <param name="transferAmount">transferAmount.</param>
        /// <param name="originApprovedOffer">originApprovedOffer.</param>
        /// <param name="limitCurrencyCode">limitCurrencyCode.</param>
        /// <param name="previousLimitAmount">previousLimitAmount.</param>
        /// <param name="previousCurrencyCode">previousCurrencyCode.</param>
        /// <param name="isUpdated">isUpdated.</param>
        /// <param name="productBlockageAmount">productBlockageAmount.</param>
        /// <param name="rowStatus">rowStatus.</param>
        /// <param name="customerLimitPreviousRisk">customerLimitPreviousRisk.</param>
        public CustomerLimitEntity(int offerReference = default(int), string typeName = default(string), string currencyName = default(string), double existingRisk = default(double), double existingLimit = default(double), string referenceLimitFlag = default(string), double blockageAmount = default(double), double currentExposure = default(double), double transferAmount = default(double), string originApprovedOffer = default(string), string limitCurrencyCode = default(string), double previousLimitAmount = default(double), string previousCurrencyCode = default(string), string isUpdated = default(string), double productBlockageAmount = default(double), string rowStatus = default(string), double customerLimitPreviousRisk = default(double))
        {
            this.OfferReference = offerReference;
            this.TypeName = typeName;
            this.CurrencyName = currencyName;
            this.ExistingRisk = existingRisk;
            this.ExistingLimit = existingLimit;
            this.ReferenceLimitFlag = referenceLimitFlag;
            this.BlockageAmount = blockageAmount;
            this.CurrentExposure = currentExposure;
            this.TransferAmount = transferAmount;
            this.OriginApprovedOffer = originApprovedOffer;
            this.LimitCurrencyCode = limitCurrencyCode;
            this.PreviousLimitAmount = previousLimitAmount;
            this.PreviousCurrencyCode = previousCurrencyCode;
            this.IsUpdated = isUpdated;
            this.ProductBlockageAmount = productBlockageAmount;
            this.RowStatus = rowStatus;
            this.CustomerLimitPreviousRisk = customerLimitPreviousRisk;
        }

        /// <summary>
        /// Gets or Sets OfferReference
        /// </summary>
        [DataMember(Name = "OfferReference", EmitDefaultValue = false)]
        public int OfferReference { get; set; }

        /// <summary>
        /// Gets or Sets TypeName
        /// </summary>
        [DataMember(Name = "TypeName", EmitDefaultValue = true)]
        public string TypeName { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyName
        /// </summary>
        [DataMember(Name = "CurrencyName", EmitDefaultValue = true)]
        public string CurrencyName { get; set; }

        /// <summary>
        /// Gets or Sets ExistingRisk
        /// </summary>
        [DataMember(Name = "ExistingRisk", EmitDefaultValue = false)]
        public double ExistingRisk { get; set; }

        /// <summary>
        /// Gets or Sets ExistingLimit
        /// </summary>
        [DataMember(Name = "ExistingLimit", EmitDefaultValue = false)]
        public double ExistingLimit { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceLimitFlag
        /// </summary>
        [DataMember(Name = "ReferenceLimitFlag", EmitDefaultValue = true)]
        public string ReferenceLimitFlag { get; set; }

        /// <summary>
        /// Gets or Sets BlockageAmount
        /// </summary>
        [DataMember(Name = "BlockageAmount", EmitDefaultValue = false)]
        public double BlockageAmount { get; set; }

        /// <summary>
        /// Gets or Sets CurrentExposure
        /// </summary>
        [DataMember(Name = "CurrentExposure", EmitDefaultValue = false)]
        public double CurrentExposure { get; set; }

        /// <summary>
        /// Gets or Sets TransferAmount
        /// </summary>
        [DataMember(Name = "TransferAmount", EmitDefaultValue = false)]
        public double TransferAmount { get; set; }

        /// <summary>
        /// Gets or Sets OriginApprovedOffer
        /// </summary>
        [DataMember(Name = "OriginApprovedOffer", EmitDefaultValue = true)]
        public string OriginApprovedOffer { get; set; }

        /// <summary>
        /// Gets or Sets LimitCurrencyCode
        /// </summary>
        [DataMember(Name = "LimitCurrencyCode", EmitDefaultValue = true)]
        public string LimitCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets PreviousLimitAmount
        /// </summary>
        [DataMember(Name = "PreviousLimitAmount", EmitDefaultValue = false)]
        public double PreviousLimitAmount { get; set; }

        /// <summary>
        /// Gets or Sets PreviousCurrencyCode
        /// </summary>
        [DataMember(Name = "PreviousCurrencyCode", EmitDefaultValue = true)]
        public string PreviousCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets IsUpdated
        /// </summary>
        [DataMember(Name = "IsUpdated", EmitDefaultValue = true)]
        public string IsUpdated { get; set; }

        /// <summary>
        /// Gets or Sets ProductBlockageAmount
        /// </summary>
        [DataMember(Name = "ProductBlockageAmount", EmitDefaultValue = false)]
        public double ProductBlockageAmount { get; set; }

        /// <summary>
        /// Gets or Sets RowStatus
        /// </summary>
        [DataMember(Name = "RowStatus", EmitDefaultValue = true)]
        public string RowStatus { get; set; }

        /// <summary>
        /// Gets or Sets CustomerLimitPreviousRisk
        /// </summary>
        [DataMember(Name = "CustomerLimitPreviousRisk", EmitDefaultValue = false)]
        public double CustomerLimitPreviousRisk { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerLimitEntity {\n");
            sb.Append("  OfferReference: ").Append(OfferReference).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  ExistingRisk: ").Append(ExistingRisk).Append("\n");
            sb.Append("  ExistingLimit: ").Append(ExistingLimit).Append("\n");
            sb.Append("  ReferenceLimitFlag: ").Append(ReferenceLimitFlag).Append("\n");
            sb.Append("  BlockageAmount: ").Append(BlockageAmount).Append("\n");
            sb.Append("  CurrentExposure: ").Append(CurrentExposure).Append("\n");
            sb.Append("  TransferAmount: ").Append(TransferAmount).Append("\n");
            sb.Append("  OriginApprovedOffer: ").Append(OriginApprovedOffer).Append("\n");
            sb.Append("  LimitCurrencyCode: ").Append(LimitCurrencyCode).Append("\n");
            sb.Append("  PreviousLimitAmount: ").Append(PreviousLimitAmount).Append("\n");
            sb.Append("  PreviousCurrencyCode: ").Append(PreviousCurrencyCode).Append("\n");
            sb.Append("  IsUpdated: ").Append(IsUpdated).Append("\n");
            sb.Append("  ProductBlockageAmount: ").Append(ProductBlockageAmount).Append("\n");
            sb.Append("  RowStatus: ").Append(RowStatus).Append("\n");
            sb.Append("  CustomerLimitPreviousRisk: ").Append(CustomerLimitPreviousRisk).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
