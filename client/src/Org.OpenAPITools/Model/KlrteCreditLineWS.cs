/*
 * Faktoring API - Test
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// KlrteCreditLineWS
    /// </summary>
    [DataContract(Name = "KlrteCreditLineWS")]
    public partial class KlrteCreditLineWS : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KlrteCreditLineWS" /> class.
        /// </summary>
        /// <param name="branchCode">branchCode.</param>
        /// <param name="lineNumber">lineNumber.</param>
        /// <param name="creditType">creditType.</param>
        /// <param name="productCode">productCode.</param>
        /// <param name="productName">productName.</param>
        /// <param name="currencyType">currencyType.</param>
        /// <param name="limit">limit.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="transferAmount">transferAmount.</param>
        /// <param name="afterUsageTransferAmount">afterUsageTransferAmount.</param>
        /// <param name="risk">risk.</param>
        /// <param name="afterUsageRisk">afterUsageRisk.</param>
        /// <param name="blockageAmount">blockageAmount.</param>
        /// <param name="availableLimitWS">availableLimitWS.</param>
        /// <param name="afterUsageAvailableLimitWS">afterUsageAvailableLimitWS.</param>
        /// <param name="usingAmount">usingAmount.</param>
        /// <param name="maturityDate">maturityDate.</param>
        /// <param name="subProductCode">subProductCode.</param>
        /// <param name="campaignCode">campaignCode.</param>
        /// <param name="projectCreditKind">projectCreditKind.</param>
        /// <param name="referenceLimitFlag">referenceLimitFlag.</param>
        /// <param name="spread">spread.</param>
        /// <param name="signSpread">signSpread.</param>
        /// <param name="resultCode">resultCode.</param>
        /// <param name="resultMessage">resultMessage.</param>
        /// <param name="cautions">cautions.</param>
        /// <param name="hasCautionInStore">hasCautionInStore.</param>
        /// <param name="documentAuthority">documentAuthority.</param>
        /// <param name="interestAmount">interestAmount.</param>
        /// <param name="warningMessages">warningMessages.</param>
        /// <param name="usedFlag">usedFlag.</param>
        /// <param name="creditAccountSuffixes">creditAccountSuffixes.</param>
        /// <param name="offerReference">offerReference.</param>
        /// <param name="lineTransferInfo">lineTransferInfo.</param>
        public KlrteCreditLineWS(int branchCode = default(int), int lineNumber = default(int), string creditType = default(string), string productCode = default(string), string productName = default(string), string currencyType = default(string), double limit = default(double), string currencyCode = default(string), double transferAmount = default(double), double afterUsageTransferAmount = default(double), double risk = default(double), double afterUsageRisk = default(double), double blockageAmount = default(double), double availableLimitWS = default(double), double afterUsageAvailableLimitWS = default(double), double usingAmount = default(double), string maturityDate = default(string), string subProductCode = default(string), string campaignCode = default(string), string projectCreditKind = default(string), string referenceLimitFlag = default(string), double spread = default(double), string signSpread = default(string), int resultCode = default(int), string resultMessage = default(string), List<KlrteCaution> cautions = default(List<KlrteCaution>), bool hasCautionInStore = default(bool), string documentAuthority = default(string), double interestAmount = default(double), List<Warning> warningMessages = default(List<Warning>), string usedFlag = default(string), List<KlrteSuffix> creditAccountSuffixes = default(List<KlrteSuffix>), int offerReference = default(int), List<LineTransferInfo> lineTransferInfo = default(List<LineTransferInfo>))
        {
            this.BranchCode = branchCode;
            this.LineNumber = lineNumber;
            this.CreditType = creditType;
            this.ProductCode = productCode;
            this.ProductName = productName;
            this.CurrencyType = currencyType;
            this.Limit = limit;
            this.CurrencyCode = currencyCode;
            this.TransferAmount = transferAmount;
            this.AfterUsageTransferAmount = afterUsageTransferAmount;
            this.Risk = risk;
            this.AfterUsageRisk = afterUsageRisk;
            this.BlockageAmount = blockageAmount;
            this.AvailableLimitWS = availableLimitWS;
            this.AfterUsageAvailableLimitWS = afterUsageAvailableLimitWS;
            this.UsingAmount = usingAmount;
            this.MaturityDate = maturityDate;
            this.SubProductCode = subProductCode;
            this.CampaignCode = campaignCode;
            this.ProjectCreditKind = projectCreditKind;
            this.ReferenceLimitFlag = referenceLimitFlag;
            this.Spread = spread;
            this.SignSpread = signSpread;
            this.ResultCode = resultCode;
            this.ResultMessage = resultMessage;
            this.Cautions = cautions;
            this.HasCautionInStore = hasCautionInStore;
            this.DocumentAuthority = documentAuthority;
            this.InterestAmount = interestAmount;
            this.WarningMessages = warningMessages;
            this.UsedFlag = usedFlag;
            this.CreditAccountSuffixes = creditAccountSuffixes;
            this.OfferReference = offerReference;
            this.LineTransferInfo = lineTransferInfo;
        }

        /// <summary>
        /// Gets or Sets BranchCode
        /// </summary>
        [DataMember(Name = "BranchCode", EmitDefaultValue = false)]
        public int BranchCode { get; set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name = "LineNumber", EmitDefaultValue = false)]
        public int LineNumber { get; set; }

        /// <summary>
        /// Gets or Sets CreditType
        /// </summary>
        [DataMember(Name = "CreditType", EmitDefaultValue = true)]
        public string CreditType { get; set; }

        /// <summary>
        /// Gets or Sets ProductCode
        /// </summary>
        [DataMember(Name = "ProductCode", EmitDefaultValue = true)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name = "ProductName", EmitDefaultValue = true)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyType
        /// </summary>
        [DataMember(Name = "CurrencyType", EmitDefaultValue = true)]
        public string CurrencyType { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "Limit", EmitDefaultValue = false)]
        public double Limit { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name = "CurrencyCode", EmitDefaultValue = true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets TransferAmount
        /// </summary>
        [DataMember(Name = "TransferAmount", EmitDefaultValue = false)]
        public double TransferAmount { get; set; }

        /// <summary>
        /// Gets or Sets AfterUsageTransferAmount
        /// </summary>
        [DataMember(Name = "AfterUsageTransferAmount", EmitDefaultValue = false)]
        public double AfterUsageTransferAmount { get; set; }

        /// <summary>
        /// Gets or Sets Risk
        /// </summary>
        [DataMember(Name = "Risk", EmitDefaultValue = false)]
        public double Risk { get; set; }

        /// <summary>
        /// Gets or Sets AfterUsageRisk
        /// </summary>
        [DataMember(Name = "AfterUsageRisk", EmitDefaultValue = false)]
        public double AfterUsageRisk { get; set; }

        /// <summary>
        /// Gets or Sets BlockageAmount
        /// </summary>
        [DataMember(Name = "BlockageAmount", EmitDefaultValue = false)]
        public double BlockageAmount { get; set; }

        /// <summary>
        /// Gets or Sets AvailableLimitWS
        /// </summary>
        [DataMember(Name = "AvailableLimitWS", EmitDefaultValue = false)]
        public double AvailableLimitWS { get; set; }

        /// <summary>
        /// Gets or Sets AfterUsageAvailableLimitWS
        /// </summary>
        [DataMember(Name = "AfterUsageAvailableLimitWS", EmitDefaultValue = false)]
        public double AfterUsageAvailableLimitWS { get; set; }

        /// <summary>
        /// Gets or Sets UsingAmount
        /// </summary>
        [DataMember(Name = "UsingAmount", EmitDefaultValue = false)]
        public double UsingAmount { get; set; }

        /// <summary>
        /// Gets or Sets MaturityDate
        /// </summary>
        [DataMember(Name = "MaturityDate", EmitDefaultValue = true)]
        public string MaturityDate { get; set; }

        /// <summary>
        /// Gets or Sets SubProductCode
        /// </summary>
        [DataMember(Name = "SubProductCode", EmitDefaultValue = true)]
        public string SubProductCode { get; set; }

        /// <summary>
        /// Gets or Sets CampaignCode
        /// </summary>
        [DataMember(Name = "CampaignCode", EmitDefaultValue = true)]
        public string CampaignCode { get; set; }

        /// <summary>
        /// Gets or Sets ProjectCreditKind
        /// </summary>
        [DataMember(Name = "ProjectCreditKind", EmitDefaultValue = true)]
        public string ProjectCreditKind { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceLimitFlag
        /// </summary>
        [DataMember(Name = "ReferenceLimitFlag", EmitDefaultValue = true)]
        public string ReferenceLimitFlag { get; set; }

        /// <summary>
        /// Gets or Sets Spread
        /// </summary>
        [DataMember(Name = "Spread", EmitDefaultValue = false)]
        public double Spread { get; set; }

        /// <summary>
        /// Gets or Sets SignSpread
        /// </summary>
        [DataMember(Name = "SignSpread", EmitDefaultValue = true)]
        public string SignSpread { get; set; }

        /// <summary>
        /// Gets or Sets ResultCode
        /// </summary>
        [DataMember(Name = "ResultCode", EmitDefaultValue = false)]
        public int ResultCode { get; set; }

        /// <summary>
        /// Gets or Sets ResultMessage
        /// </summary>
        [DataMember(Name = "ResultMessage", EmitDefaultValue = true)]
        public string ResultMessage { get; set; }

        /// <summary>
        /// Gets or Sets Cautions
        /// </summary>
        [DataMember(Name = "Cautions", EmitDefaultValue = true)]
        public List<KlrteCaution> Cautions { get; set; }

        /// <summary>
        /// Gets or Sets HasCautionInStore
        /// </summary>
        [DataMember(Name = "HasCautionInStore", EmitDefaultValue = true)]
        public bool HasCautionInStore { get; set; }

        /// <summary>
        /// Gets or Sets DocumentAuthority
        /// </summary>
        [DataMember(Name = "DocumentAuthority", EmitDefaultValue = true)]
        public string DocumentAuthority { get; set; }

        /// <summary>
        /// Gets or Sets InterestAmount
        /// </summary>
        [DataMember(Name = "InterestAmount", EmitDefaultValue = false)]
        public double InterestAmount { get; set; }

        /// <summary>
        /// Gets or Sets WarningMessages
        /// </summary>
        [DataMember(Name = "WarningMessages", EmitDefaultValue = true)]
        public List<Warning> WarningMessages { get; set; }

        /// <summary>
        /// Gets or Sets UsedFlag
        /// </summary>
        [DataMember(Name = "UsedFlag", EmitDefaultValue = true)]
        public string UsedFlag { get; set; }

        /// <summary>
        /// Gets or Sets CreditAccountSuffixes
        /// </summary>
        [DataMember(Name = "CreditAccountSuffixes", EmitDefaultValue = true)]
        public List<KlrteSuffix> CreditAccountSuffixes { get; set; }

        /// <summary>
        /// Gets or Sets OfferReference
        /// </summary>
        [DataMember(Name = "OfferReference", EmitDefaultValue = false)]
        public int OfferReference { get; set; }

        /// <summary>
        /// Gets or Sets LineTransferInfo
        /// </summary>
        [DataMember(Name = "LineTransferInfo", EmitDefaultValue = true)]
        public List<LineTransferInfo> LineTransferInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KlrteCreditLineWS {\n");
            sb.Append("  BranchCode: ").Append(BranchCode).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  CreditType: ").Append(CreditType).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  CurrencyType: ").Append(CurrencyType).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  TransferAmount: ").Append(TransferAmount).Append("\n");
            sb.Append("  AfterUsageTransferAmount: ").Append(AfterUsageTransferAmount).Append("\n");
            sb.Append("  Risk: ").Append(Risk).Append("\n");
            sb.Append("  AfterUsageRisk: ").Append(AfterUsageRisk).Append("\n");
            sb.Append("  BlockageAmount: ").Append(BlockageAmount).Append("\n");
            sb.Append("  AvailableLimitWS: ").Append(AvailableLimitWS).Append("\n");
            sb.Append("  AfterUsageAvailableLimitWS: ").Append(AfterUsageAvailableLimitWS).Append("\n");
            sb.Append("  UsingAmount: ").Append(UsingAmount).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  SubProductCode: ").Append(SubProductCode).Append("\n");
            sb.Append("  CampaignCode: ").Append(CampaignCode).Append("\n");
            sb.Append("  ProjectCreditKind: ").Append(ProjectCreditKind).Append("\n");
            sb.Append("  ReferenceLimitFlag: ").Append(ReferenceLimitFlag).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("  SignSpread: ").Append(SignSpread).Append("\n");
            sb.Append("  ResultCode: ").Append(ResultCode).Append("\n");
            sb.Append("  ResultMessage: ").Append(ResultMessage).Append("\n");
            sb.Append("  Cautions: ").Append(Cautions).Append("\n");
            sb.Append("  HasCautionInStore: ").Append(HasCautionInStore).Append("\n");
            sb.Append("  DocumentAuthority: ").Append(DocumentAuthority).Append("\n");
            sb.Append("  InterestAmount: ").Append(InterestAmount).Append("\n");
            sb.Append("  WarningMessages: ").Append(WarningMessages).Append("\n");
            sb.Append("  UsedFlag: ").Append(UsedFlag).Append("\n");
            sb.Append("  CreditAccountSuffixes: ").Append(CreditAccountSuffixes).Append("\n");
            sb.Append("  OfferReference: ").Append(OfferReference).Append("\n");
            sb.Append("  LineTransferInfo: ").Append(LineTransferInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
