/*
 * Faktoring API - Test
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EWTotalQueryRequest
    /// </summary>
    [DataContract(Name = "EWTotalQueryRequest")]
    public partial class EWTotalQueryRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EWTotalQueryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EWTotalQueryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EWTotalQueryRequest" /> class.
        /// </summary>
        /// <param name="queryDateStart">queryDateStart (required).</param>
        /// <param name="queryDateEnd">queryDateEnd (required).</param>
        /// <param name="warningCodes">warningCodes.</param>
        /// <param name="warningColors">warningColors.</param>
        /// <param name="warningStatus">warningStatus.</param>
        /// <param name="signalType">signalType.</param>
        public EWTotalQueryRequest(DateTime queryDateStart = default(DateTime), DateTime queryDateEnd = default(DateTime), string warningCodes = default(string), string warningColors = default(string), string warningStatus = default(string), string signalType = default(string))
        {
            this.QueryDateStart = queryDateStart;
            this.QueryDateEnd = queryDateEnd;
            this.WarningCodes = warningCodes;
            this.WarningColors = warningColors;
            this.WarningStatus = warningStatus;
            this.SignalType = signalType;
        }

        /// <summary>
        /// Gets or Sets QueryDateStart
        /// </summary>
        [DataMember(Name = "QueryDateStart", IsRequired = true, EmitDefaultValue = true)]
        public DateTime QueryDateStart { get; set; }

        /// <summary>
        /// Gets or Sets QueryDateEnd
        /// </summary>
        [DataMember(Name = "QueryDateEnd", IsRequired = true, EmitDefaultValue = true)]
        public DateTime QueryDateEnd { get; set; }

        /// <summary>
        /// Gets or Sets WarningCodes
        /// </summary>
        [DataMember(Name = "WarningCodes", EmitDefaultValue = true)]
        public string WarningCodes { get; set; }

        /// <summary>
        /// Gets or Sets WarningColors
        /// </summary>
        [DataMember(Name = "WarningColors", EmitDefaultValue = true)]
        public string WarningColors { get; set; }

        /// <summary>
        /// Gets or Sets WarningStatus
        /// </summary>
        [DataMember(Name = "WarningStatus", EmitDefaultValue = true)]
        public string WarningStatus { get; set; }

        /// <summary>
        /// Gets or Sets SignalType
        /// </summary>
        [DataMember(Name = "SignalType", EmitDefaultValue = true)]
        public string SignalType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EWTotalQueryRequest {\n");
            sb.Append("  QueryDateStart: ").Append(QueryDateStart).Append("\n");
            sb.Append("  QueryDateEnd: ").Append(QueryDateEnd).Append("\n");
            sb.Append("  WarningCodes: ").Append(WarningCodes).Append("\n");
            sb.Append("  WarningColors: ").Append(WarningColors).Append("\n");
            sb.Append("  WarningStatus: ").Append(WarningStatus).Append("\n");
            sb.Append("  SignalType: ").Append(SignalType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
