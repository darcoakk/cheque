/*
 * Faktoring API - Test
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CustomerRisks
    /// </summary>
    [DataContract(Name = "CustomerRisks")]
    public partial class CustomerRisks : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerRisks" /> class.
        /// </summary>
        /// <param name="customerID">customerID.</param>
        /// <param name="customerNumber">customerNumber.</param>
        /// <param name="firmName">firmName.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="limit">limit.</param>
        /// <param name="totalRisk">totalRisk.</param>
        /// <param name="nakitRisk">nakitRisk.</param>
        /// <param name="gayriNakitRisk">gayriNakitRisk.</param>
        /// <param name="turevRisk">turevRisk.</param>
        public CustomerRisks(string customerID = default(string), string customerNumber = default(string), string firmName = default(string), string currencyCode = default(string), double limit = default(double), double totalRisk = default(double), double nakitRisk = default(double), double gayriNakitRisk = default(double), double turevRisk = default(double))
        {
            this.CustomerID = customerID;
            this.CustomerNumber = customerNumber;
            this.FirmName = firmName;
            this.CurrencyCode = currencyCode;
            this.Limit = limit;
            this.TotalRisk = totalRisk;
            this.NakitRisk = nakitRisk;
            this.GayriNakitRisk = gayriNakitRisk;
            this.TurevRisk = turevRisk;
        }

        /// <summary>
        /// Gets or Sets CustomerID
        /// </summary>
        [DataMember(Name = "CustomerID", EmitDefaultValue = true)]
        public string CustomerID { get; set; }

        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name = "CustomerNumber", EmitDefaultValue = true)]
        public string CustomerNumber { get; set; }

        /// <summary>
        /// Gets or Sets FirmName
        /// </summary>
        [DataMember(Name = "FirmName", EmitDefaultValue = true)]
        public string FirmName { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name = "CurrencyCode", EmitDefaultValue = true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "Limit", EmitDefaultValue = false)]
        public double Limit { get; set; }

        /// <summary>
        /// Gets or Sets TotalRisk
        /// </summary>
        [DataMember(Name = "TotalRisk", EmitDefaultValue = false)]
        public double TotalRisk { get; set; }

        /// <summary>
        /// Gets or Sets NakitRisk
        /// </summary>
        [DataMember(Name = "NakitRisk", EmitDefaultValue = false)]
        public double NakitRisk { get; set; }

        /// <summary>
        /// Gets or Sets GayriNakitRisk
        /// </summary>
        [DataMember(Name = "GayriNakitRisk", EmitDefaultValue = false)]
        public double GayriNakitRisk { get; set; }

        /// <summary>
        /// Gets or Sets TurevRisk
        /// </summary>
        [DataMember(Name = "TurevRisk", EmitDefaultValue = false)]
        public double TurevRisk { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerRisks {\n");
            sb.Append("  CustomerID: ").Append(CustomerID).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  FirmName: ").Append(FirmName).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  TotalRisk: ").Append(TotalRisk).Append("\n");
            sb.Append("  NakitRisk: ").Append(NakitRisk).Append("\n");
            sb.Append("  GayriNakitRisk: ").Append(GayriNakitRisk).Append("\n");
            sb.Append("  TurevRisk: ").Append(TurevRisk).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
