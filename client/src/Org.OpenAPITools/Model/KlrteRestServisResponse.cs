/*
 * Faktoring API - Test
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// KlrteRestServisResponse
    /// </summary>
    [DataContract(Name = "KlrteRestServisResponse")]
    public partial class KlrteRestServisResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KlrteRestServisResponse" /> class.
        /// </summary>
        /// <param name="chequeDiffAmount">chequeDiffAmount.</param>
        /// <param name="chequeDiffMessage">chequeDiffMessage.</param>
        /// <param name="groupCode">groupCode.</param>
        /// <param name="groupName">groupName.</param>
        /// <param name="groupBusinessLine">groupBusinessLine.</param>
        /// <param name="customerNumber">customerNumber.</param>
        /// <param name="errorCode">errorCode.</param>
        /// <param name="errorMsg">errorMsg.</param>
        /// <param name="totalEngagementGapAmount">totalEngagementGapAmount.</param>
        /// <param name="totalEngagementGapCurrencyCode">totalEngagementGapCurrencyCode.</param>
        /// <param name="totalEngagementGapAmountBeforeUsage">totalEngagementGapAmountBeforeUsage.</param>
        /// <param name="totalEngagementGapCurrencyCodeBeforeUsage">totalEngagementGapCurrencyCodeBeforeUsage.</param>
        /// <param name="engagementGapMessage">engagementGapMessage.</param>
        /// <param name="differenceFlag">differenceFlag.</param>
        /// <param name="differenceMessage">differenceMessage.</param>
        /// <param name="documentFlag">documentFlag.</param>
        /// <param name="documentMessage">documentMessage.</param>
        /// <param name="revisionDate">revisionDate.</param>
        /// <param name="validDate">validDate.</param>
        /// <param name="maturityDate">maturityDate.</param>
        /// <param name="customerRating">customerRating.</param>
        /// <param name="baselRating">baselRating.</param>
        /// <param name="businessLine">businessLine.</param>
        /// <param name="creditAllocationDepartment">creditAllocationDepartment.</param>
        /// <param name="authorizationCode">authorizationCode.</param>
        /// <param name="missingGuarantorsMessage">missingGuarantorsMessage.</param>
        /// <param name="missingGuarantorsFlag">missingGuarantorsFlag.</param>
        /// <param name="creditLines">creditLines.</param>
        /// <param name="takenCautions">takenCautions.</param>
        /// <param name="customerLimits">customerLimits.</param>
        /// <param name="groupLimits">groupLimits.</param>
        /// <param name="engagementMatch">engagementMatch.</param>
        /// <param name="diffList">diffList.</param>
        /// <param name="engagementDocumentAuthority">engagementDocumentAuthority.</param>
        /// <param name="engagementMessage">engagementMessage.</param>
        /// <param name="documentAuthority">documentAuthority.</param>
        /// <param name="warningMessages">warningMessages.</param>
        public KlrteRestServisResponse(double chequeDiffAmount = default(double), string chequeDiffMessage = default(string), string groupCode = default(string), string groupName = default(string), string groupBusinessLine = default(string), int customerNumber = default(int), int errorCode = default(int), string errorMsg = default(string), double totalEngagementGapAmount = default(double), string totalEngagementGapCurrencyCode = default(string), double totalEngagementGapAmountBeforeUsage = default(double), string totalEngagementGapCurrencyCodeBeforeUsage = default(string), string engagementGapMessage = default(string), string differenceFlag = default(string), string differenceMessage = default(string), string documentFlag = default(string), string documentMessage = default(string), string revisionDate = default(string), string validDate = default(string), string maturityDate = default(string), string customerRating = default(string), string baselRating = default(string), string businessLine = default(string), string creditAllocationDepartment = default(string), string authorizationCode = default(string), string missingGuarantorsMessage = default(string), string missingGuarantorsFlag = default(string), List<KlrteCreditLineWS> creditLines = default(List<KlrteCreditLineWS>), List<KlrteTakenCaution> takenCautions = default(List<KlrteTakenCaution>), List<CustomerLimitEntity> customerLimits = default(List<CustomerLimitEntity>), List<GroupLimitEntity> groupLimits = default(List<GroupLimitEntity>), List<KlrteEngagemantMatch> engagementMatch = default(List<KlrteEngagemantMatch>), List<DifEntity> diffList = default(List<DifEntity>), string engagementDocumentAuthority = default(string), string engagementMessage = default(string), string documentAuthority = default(string), List<Warning> warningMessages = default(List<Warning>))
        {
            this.ChequeDiffAmount = chequeDiffAmount;
            this.ChequeDiffMessage = chequeDiffMessage;
            this.GroupCode = groupCode;
            this.GroupName = groupName;
            this.GroupBusinessLine = groupBusinessLine;
            this.CustomerNumber = customerNumber;
            this.ErrorCode = errorCode;
            this.ErrorMsg = errorMsg;
            this.TotalEngagementGapAmount = totalEngagementGapAmount;
            this.TotalEngagementGapCurrencyCode = totalEngagementGapCurrencyCode;
            this.TotalEngagementGapAmountBeforeUsage = totalEngagementGapAmountBeforeUsage;
            this.TotalEngagementGapCurrencyCodeBeforeUsage = totalEngagementGapCurrencyCodeBeforeUsage;
            this.EngagementGapMessage = engagementGapMessage;
            this.DifferenceFlag = differenceFlag;
            this.DifferenceMessage = differenceMessage;
            this.DocumentFlag = documentFlag;
            this.DocumentMessage = documentMessage;
            this.RevisionDate = revisionDate;
            this.ValidDate = validDate;
            this.MaturityDate = maturityDate;
            this.CustomerRating = customerRating;
            this.BaselRating = baselRating;
            this.BusinessLine = businessLine;
            this.CreditAllocationDepartment = creditAllocationDepartment;
            this.AuthorizationCode = authorizationCode;
            this.MissingGuarantorsMessage = missingGuarantorsMessage;
            this.MissingGuarantorsFlag = missingGuarantorsFlag;
            this.CreditLines = creditLines;
            this.TakenCautions = takenCautions;
            this.CustomerLimits = customerLimits;
            this.GroupLimits = groupLimits;
            this.EngagementMatch = engagementMatch;
            this.DiffList = diffList;
            this.EngagementDocumentAuthority = engagementDocumentAuthority;
            this.EngagementMessage = engagementMessage;
            this.DocumentAuthority = documentAuthority;
            this.WarningMessages = warningMessages;
        }

        /// <summary>
        /// Gets or Sets ChequeDiffAmount
        /// </summary>
        [DataMember(Name = "ChequeDiffAmount", EmitDefaultValue = false)]
        public double ChequeDiffAmount { get; set; }

        /// <summary>
        /// Gets or Sets ChequeDiffMessage
        /// </summary>
        [DataMember(Name = "ChequeDiffMessage", EmitDefaultValue = true)]
        public string ChequeDiffMessage { get; set; }

        /// <summary>
        /// Gets or Sets GroupCode
        /// </summary>
        [DataMember(Name = "GroupCode", EmitDefaultValue = true)]
        public string GroupCode { get; set; }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name = "GroupName", EmitDefaultValue = true)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets GroupBusinessLine
        /// </summary>
        [DataMember(Name = "GroupBusinessLine", EmitDefaultValue = true)]
        public string GroupBusinessLine { get; set; }

        /// <summary>
        /// Gets or Sets CustomerNumber
        /// </summary>
        [DataMember(Name = "CustomerNumber", EmitDefaultValue = false)]
        public int CustomerNumber { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name = "ErrorCode", EmitDefaultValue = false)]
        public int ErrorCode { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMsg
        /// </summary>
        [DataMember(Name = "ErrorMsg", EmitDefaultValue = true)]
        public string ErrorMsg { get; set; }

        /// <summary>
        /// Gets or Sets TotalEngagementGapAmount
        /// </summary>
        [DataMember(Name = "TotalEngagementGapAmount", EmitDefaultValue = false)]
        public double TotalEngagementGapAmount { get; set; }

        /// <summary>
        /// Gets or Sets TotalEngagementGapCurrencyCode
        /// </summary>
        [DataMember(Name = "TotalEngagementGapCurrencyCode", EmitDefaultValue = true)]
        public string TotalEngagementGapCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets TotalEngagementGapAmountBeforeUsage
        /// </summary>
        [DataMember(Name = "TotalEngagementGapAmountBeforeUsage", EmitDefaultValue = false)]
        public double TotalEngagementGapAmountBeforeUsage { get; set; }

        /// <summary>
        /// Gets or Sets TotalEngagementGapCurrencyCodeBeforeUsage
        /// </summary>
        [DataMember(Name = "TotalEngagementGapCurrencyCodeBeforeUsage", EmitDefaultValue = true)]
        public string TotalEngagementGapCurrencyCodeBeforeUsage { get; set; }

        /// <summary>
        /// Gets or Sets EngagementGapMessage
        /// </summary>
        [DataMember(Name = "EngagementGapMessage", EmitDefaultValue = true)]
        public string EngagementGapMessage { get; set; }

        /// <summary>
        /// Gets or Sets DifferenceFlag
        /// </summary>
        [DataMember(Name = "DifferenceFlag", EmitDefaultValue = true)]
        public string DifferenceFlag { get; set; }

        /// <summary>
        /// Gets or Sets DifferenceMessage
        /// </summary>
        [DataMember(Name = "DifferenceMessage", EmitDefaultValue = true)]
        public string DifferenceMessage { get; set; }

        /// <summary>
        /// Gets or Sets DocumentFlag
        /// </summary>
        [DataMember(Name = "DocumentFlag", EmitDefaultValue = true)]
        public string DocumentFlag { get; set; }

        /// <summary>
        /// Gets or Sets DocumentMessage
        /// </summary>
        [DataMember(Name = "DocumentMessage", EmitDefaultValue = true)]
        public string DocumentMessage { get; set; }

        /// <summary>
        /// Gets or Sets RevisionDate
        /// </summary>
        [DataMember(Name = "RevisionDate", EmitDefaultValue = true)]
        public string RevisionDate { get; set; }

        /// <summary>
        /// Gets or Sets ValidDate
        /// </summary>
        [DataMember(Name = "ValidDate", EmitDefaultValue = true)]
        public string ValidDate { get; set; }

        /// <summary>
        /// Gets or Sets MaturityDate
        /// </summary>
        [DataMember(Name = "MaturityDate", EmitDefaultValue = true)]
        public string MaturityDate { get; set; }

        /// <summary>
        /// Gets or Sets CustomerRating
        /// </summary>
        [DataMember(Name = "CustomerRating", EmitDefaultValue = true)]
        public string CustomerRating { get; set; }

        /// <summary>
        /// Gets or Sets BaselRating
        /// </summary>
        [DataMember(Name = "BaselRating", EmitDefaultValue = true)]
        public string BaselRating { get; set; }

        /// <summary>
        /// Gets or Sets BusinessLine
        /// </summary>
        [DataMember(Name = "BusinessLine", EmitDefaultValue = true)]
        public string BusinessLine { get; set; }

        /// <summary>
        /// Gets or Sets CreditAllocationDepartment
        /// </summary>
        [DataMember(Name = "CreditAllocationDepartment", EmitDefaultValue = true)]
        public string CreditAllocationDepartment { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizationCode
        /// </summary>
        [DataMember(Name = "AuthorizationCode", EmitDefaultValue = true)]
        public string AuthorizationCode { get; set; }

        /// <summary>
        /// Gets or Sets MissingGuarantorsMessage
        /// </summary>
        [DataMember(Name = "MissingGuarantorsMessage", EmitDefaultValue = true)]
        public string MissingGuarantorsMessage { get; set; }

        /// <summary>
        /// Gets or Sets MissingGuarantorsFlag
        /// </summary>
        [DataMember(Name = "MissingGuarantorsFlag", EmitDefaultValue = true)]
        public string MissingGuarantorsFlag { get; set; }

        /// <summary>
        /// Gets or Sets CreditLines
        /// </summary>
        [DataMember(Name = "CreditLines", EmitDefaultValue = true)]
        public List<KlrteCreditLineWS> CreditLines { get; set; }

        /// <summary>
        /// Gets or Sets TakenCautions
        /// </summary>
        [DataMember(Name = "TakenCautions", EmitDefaultValue = true)]
        public List<KlrteTakenCaution> TakenCautions { get; set; }

        /// <summary>
        /// Gets or Sets CustomerLimits
        /// </summary>
        [DataMember(Name = "CustomerLimits", EmitDefaultValue = true)]
        public List<CustomerLimitEntity> CustomerLimits { get; set; }

        /// <summary>
        /// Gets or Sets GroupLimits
        /// </summary>
        [DataMember(Name = "GroupLimits", EmitDefaultValue = true)]
        public List<GroupLimitEntity> GroupLimits { get; set; }

        /// <summary>
        /// Gets or Sets EngagementMatch
        /// </summary>
        [DataMember(Name = "EngagementMatch", EmitDefaultValue = true)]
        public List<KlrteEngagemantMatch> EngagementMatch { get; set; }

        /// <summary>
        /// Gets or Sets DiffList
        /// </summary>
        [DataMember(Name = "DiffList", EmitDefaultValue = true)]
        public List<DifEntity> DiffList { get; set; }

        /// <summary>
        /// Gets or Sets EngagementDocumentAuthority
        /// </summary>
        [DataMember(Name = "EngagementDocumentAuthority", EmitDefaultValue = true)]
        public string EngagementDocumentAuthority { get; set; }

        /// <summary>
        /// Gets or Sets EngagementMessage
        /// </summary>
        [DataMember(Name = "EngagementMessage", EmitDefaultValue = true)]
        public string EngagementMessage { get; set; }

        /// <summary>
        /// Gets or Sets DocumentAuthority
        /// </summary>
        [DataMember(Name = "DocumentAuthority", EmitDefaultValue = true)]
        public string DocumentAuthority { get; set; }

        /// <summary>
        /// Gets or Sets WarningMessages
        /// </summary>
        [DataMember(Name = "WarningMessages", EmitDefaultValue = true)]
        public List<Warning> WarningMessages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KlrteRestServisResponse {\n");
            sb.Append("  ChequeDiffAmount: ").Append(ChequeDiffAmount).Append("\n");
            sb.Append("  ChequeDiffMessage: ").Append(ChequeDiffMessage).Append("\n");
            sb.Append("  GroupCode: ").Append(GroupCode).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  GroupBusinessLine: ").Append(GroupBusinessLine).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMsg: ").Append(ErrorMsg).Append("\n");
            sb.Append("  TotalEngagementGapAmount: ").Append(TotalEngagementGapAmount).Append("\n");
            sb.Append("  TotalEngagementGapCurrencyCode: ").Append(TotalEngagementGapCurrencyCode).Append("\n");
            sb.Append("  TotalEngagementGapAmountBeforeUsage: ").Append(TotalEngagementGapAmountBeforeUsage).Append("\n");
            sb.Append("  TotalEngagementGapCurrencyCodeBeforeUsage: ").Append(TotalEngagementGapCurrencyCodeBeforeUsage).Append("\n");
            sb.Append("  EngagementGapMessage: ").Append(EngagementGapMessage).Append("\n");
            sb.Append("  DifferenceFlag: ").Append(DifferenceFlag).Append("\n");
            sb.Append("  DifferenceMessage: ").Append(DifferenceMessage).Append("\n");
            sb.Append("  DocumentFlag: ").Append(DocumentFlag).Append("\n");
            sb.Append("  DocumentMessage: ").Append(DocumentMessage).Append("\n");
            sb.Append("  RevisionDate: ").Append(RevisionDate).Append("\n");
            sb.Append("  ValidDate: ").Append(ValidDate).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  CustomerRating: ").Append(CustomerRating).Append("\n");
            sb.Append("  BaselRating: ").Append(BaselRating).Append("\n");
            sb.Append("  BusinessLine: ").Append(BusinessLine).Append("\n");
            sb.Append("  CreditAllocationDepartment: ").Append(CreditAllocationDepartment).Append("\n");
            sb.Append("  AuthorizationCode: ").Append(AuthorizationCode).Append("\n");
            sb.Append("  MissingGuarantorsMessage: ").Append(MissingGuarantorsMessage).Append("\n");
            sb.Append("  MissingGuarantorsFlag: ").Append(MissingGuarantorsFlag).Append("\n");
            sb.Append("  CreditLines: ").Append(CreditLines).Append("\n");
            sb.Append("  TakenCautions: ").Append(TakenCautions).Append("\n");
            sb.Append("  CustomerLimits: ").Append(CustomerLimits).Append("\n");
            sb.Append("  GroupLimits: ").Append(GroupLimits).Append("\n");
            sb.Append("  EngagementMatch: ").Append(EngagementMatch).Append("\n");
            sb.Append("  DiffList: ").Append(DiffList).Append("\n");
            sb.Append("  EngagementDocumentAuthority: ").Append(EngagementDocumentAuthority).Append("\n");
            sb.Append("  EngagementMessage: ").Append(EngagementMessage).Append("\n");
            sb.Append("  DocumentAuthority: ").Append(DocumentAuthority).Append("\n");
            sb.Append("  WarningMessages: ").Append(WarningMessages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
