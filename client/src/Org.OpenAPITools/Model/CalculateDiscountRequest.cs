/*
 * Faktoring API - Test
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CalculateDiscountRequest
    /// </summary>
    [DataContract(Name = "CalculateDiscountRequest")]
    public partial class CalculateDiscountRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculateDiscountRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CalculateDiscountRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculateDiscountRequest" /> class.
        /// </summary>
        /// <param name="bpmNo">bpmNo (required).</param>
        /// <param name="tcknVkn">tcknVkn (required).</param>
        /// <param name="currencyCode">currencyCode (required).</param>
        /// <param name="commissionRate">commissionRate.</param>
        /// <param name="otherCosts">otherCosts.</param>
        /// <param name="forInformation">forInformation (required).</param>
        /// <param name="accountInfo">accountInfo.</param>
        /// <param name="chequeList">chequeList (required).</param>
        /// <param name="productCode">productCode.</param>
        /// <param name="projectCode">projectCode.</param>
        /// <param name="campaignCode">campaignCode.</param>
        /// <param name="discountType">discountType.</param>
        /// <param name="discountSubType">discountSubType.</param>
        /// <param name="discountInterestRate">discountInterestRate.</param>
        /// <param name="isDiscountInterestRateChanged">isDiscountInterestRateChanged.</param>
        public CalculateDiscountRequest(int bpmNo = default(int), string tcknVkn = default(string), string currencyCode = default(string), double commissionRate = default(double), double otherCosts = default(double), bool forInformation = default(bool), string accountInfo = default(string), List<string> chequeList = default(List<string>), string productCode = default(string), string projectCode = default(string), string campaignCode = default(string), string discountType = default(string), string discountSubType = default(string), double discountInterestRate = default(double), bool isDiscountInterestRateChanged = default(bool))
        {
            this.BpmNo = bpmNo;
            // to ensure "tcknVkn" is required (not null)
            if (tcknVkn == null)
            {
                throw new ArgumentNullException("tcknVkn is a required property for CalculateDiscountRequest and cannot be null");
            }
            this.TcknVkn = tcknVkn;
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
            {
                throw new ArgumentNullException("currencyCode is a required property for CalculateDiscountRequest and cannot be null");
            }
            this.CurrencyCode = currencyCode;
            this.ForInformation = forInformation;
            // to ensure "chequeList" is required (not null)
            if (chequeList == null)
            {
                throw new ArgumentNullException("chequeList is a required property for CalculateDiscountRequest and cannot be null");
            }
            this.ChequeList = chequeList;
            this.CommissionRate = commissionRate;
            this.OtherCosts = otherCosts;
            this.AccountInfo = accountInfo;
            this.ProductCode = productCode;
            this.ProjectCode = projectCode;
            this.CampaignCode = campaignCode;
            this.DiscountType = discountType;
            this.DiscountSubType = discountSubType;
            this.DiscountInterestRate = discountInterestRate;
            this.IsDiscountInterestRateChanged = isDiscountInterestRateChanged;
        }

        /// <summary>
        /// Gets or Sets BpmNo
        /// </summary>
        [DataMember(Name = "BpmNo", IsRequired = true, EmitDefaultValue = true)]
        public int BpmNo { get; set; }

        /// <summary>
        /// Gets or Sets TcknVkn
        /// </summary>
        [DataMember(Name = "TcknVkn", IsRequired = true, EmitDefaultValue = true)]
        public string TcknVkn { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name = "CurrencyCode", IsRequired = true, EmitDefaultValue = true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets CommissionRate
        /// </summary>
        [DataMember(Name = "CommissionRate", EmitDefaultValue = false)]
        public double CommissionRate { get; set; }

        /// <summary>
        /// Gets or Sets OtherCosts
        /// </summary>
        [DataMember(Name = "OtherCosts", EmitDefaultValue = false)]
        public double OtherCosts { get; set; }

        /// <summary>
        /// Gets or Sets ForInformation
        /// </summary>
        [DataMember(Name = "ForInformation", IsRequired = true, EmitDefaultValue = true)]
        public bool ForInformation { get; set; }

        /// <summary>
        /// Gets or Sets AccountInfo
        /// </summary>
        [DataMember(Name = "AccountInfo", EmitDefaultValue = true)]
        public string AccountInfo { get; set; }

        /// <summary>
        /// Gets or Sets ChequeList
        /// </summary>
        [DataMember(Name = "ChequeList", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ChequeList { get; set; }

        /// <summary>
        /// Gets or Sets ProductCode
        /// </summary>
        [DataMember(Name = "ProductCode", EmitDefaultValue = true)]
        public string ProductCode { get; set; }

        /// <summary>
        /// Gets or Sets ProjectCode
        /// </summary>
        [DataMember(Name = "ProjectCode", EmitDefaultValue = true)]
        public string ProjectCode { get; set; }

        /// <summary>
        /// Gets or Sets CampaignCode
        /// </summary>
        [DataMember(Name = "CampaignCode", EmitDefaultValue = true)]
        public string CampaignCode { get; set; }

        /// <summary>
        /// Gets or Sets DiscountType
        /// </summary>
        [DataMember(Name = "DiscountType", EmitDefaultValue = true)]
        public string DiscountType { get; set; }

        /// <summary>
        /// Gets or Sets DiscountSubType
        /// </summary>
        [DataMember(Name = "DiscountSubType", EmitDefaultValue = true)]
        public string DiscountSubType { get; set; }

        /// <summary>
        /// Gets or Sets DiscountInterestRate
        /// </summary>
        [DataMember(Name = "DiscountInterestRate", EmitDefaultValue = false)]
        public double DiscountInterestRate { get; set; }

        /// <summary>
        /// Gets or Sets IsDiscountInterestRateChanged
        /// </summary>
        [DataMember(Name = "IsDiscountInterestRateChanged", EmitDefaultValue = true)]
        public bool IsDiscountInterestRateChanged { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CalculateDiscountRequest {\n");
            sb.Append("  BpmNo: ").Append(BpmNo).Append("\n");
            sb.Append("  TcknVkn: ").Append(TcknVkn).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CommissionRate: ").Append(CommissionRate).Append("\n");
            sb.Append("  OtherCosts: ").Append(OtherCosts).Append("\n");
            sb.Append("  ForInformation: ").Append(ForInformation).Append("\n");
            sb.Append("  AccountInfo: ").Append(AccountInfo).Append("\n");
            sb.Append("  ChequeList: ").Append(ChequeList).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProjectCode: ").Append(ProjectCode).Append("\n");
            sb.Append("  CampaignCode: ").Append(CampaignCode).Append("\n");
            sb.Append("  DiscountType: ").Append(DiscountType).Append("\n");
            sb.Append("  DiscountSubType: ").Append(DiscountSubType).Append("\n");
            sb.Append("  DiscountInterestRate: ").Append(DiscountInterestRate).Append("\n");
            sb.Append("  IsDiscountInterestRateChanged: ").Append(IsDiscountInterestRateChanged).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TcknVkn (string) minLength
            if (this.TcknVkn != null && this.TcknVkn.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TcknVkn, length must be greater than 1.", new [] { "TcknVkn" });
            }

            // CurrencyCode (string) minLength
            if (this.CurrencyCode != null && this.CurrencyCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyCode, length must be greater than 1.", new [] { "CurrencyCode" });
            }

            yield break;
        }
    }

}
