/*
 * Faktoring API - Test
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// KlrteEngagemantMatch
    /// </summary>
    [DataContract(Name = "KlrteEngagemantMatch")]
    public partial class KlrteEngagemantMatch : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KlrteEngagemantMatch" /> class.
        /// </summary>
        /// <param name="accountBranchCode">accountBranchCode.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="accountSuffix">accountSuffix.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="riskAmount">riskAmount.</param>
        /// <param name="amount">amount.</param>
        /// <param name="remainingRiskAmount">remainingRiskAmount.</param>
        /// <param name="engagementRef">engagementRef.</param>
        /// <param name="engagementDate">engagementDate.</param>
        /// <param name="engagementAmount">engagementAmount.</param>
        /// <param name="remainingEngagementAmount">remainingEngagementAmount.</param>
        /// <param name="engagementCurrencyCode">engagementCurrencyCode.</param>
        /// <param name="engagementType">engagementType.</param>
        /// <param name="engagementTypeName">engagementTypeName.</param>
        /// <param name="lineType">lineType.</param>
        /// <param name="engagementKindName">engagementKindName.</param>
        /// <param name="engagementKind">engagementKind.</param>
        public KlrteEngagemantMatch(int accountBranchCode = default(int), int accountNumber = default(int), int accountSuffix = default(int), string currencyCode = default(string), double riskAmount = default(double), double amount = default(double), double remainingRiskAmount = default(double), int engagementRef = default(int), string engagementDate = default(string), double engagementAmount = default(double), double remainingEngagementAmount = default(double), string engagementCurrencyCode = default(string), string engagementType = default(string), string engagementTypeName = default(string), string lineType = default(string), string engagementKindName = default(string), string engagementKind = default(string))
        {
            this.AccountBranchCode = accountBranchCode;
            this.AccountNumber = accountNumber;
            this.AccountSuffix = accountSuffix;
            this.CurrencyCode = currencyCode;
            this.RiskAmount = riskAmount;
            this.Amount = amount;
            this.RemainingRiskAmount = remainingRiskAmount;
            this.EngagementRef = engagementRef;
            this.EngagementDate = engagementDate;
            this.EngagementAmount = engagementAmount;
            this.RemainingEngagementAmount = remainingEngagementAmount;
            this.EngagementCurrencyCode = engagementCurrencyCode;
            this.EngagementType = engagementType;
            this.EngagementTypeName = engagementTypeName;
            this.LineType = lineType;
            this.EngagementKindName = engagementKindName;
            this.EngagementKind = engagementKind;
        }

        /// <summary>
        /// Gets or Sets AccountBranchCode
        /// </summary>
        [DataMember(Name = "AccountBranchCode", EmitDefaultValue = false)]
        public int AccountBranchCode { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name = "AccountNumber", EmitDefaultValue = false)]
        public int AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets AccountSuffix
        /// </summary>
        [DataMember(Name = "AccountSuffix", EmitDefaultValue = false)]
        public int AccountSuffix { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name = "CurrencyCode", EmitDefaultValue = true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets RiskAmount
        /// </summary>
        [DataMember(Name = "RiskAmount", EmitDefaultValue = false)]
        public double RiskAmount { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets RemainingRiskAmount
        /// </summary>
        [DataMember(Name = "RemainingRiskAmount", EmitDefaultValue = false)]
        public double RemainingRiskAmount { get; set; }

        /// <summary>
        /// Gets or Sets EngagementRef
        /// </summary>
        [DataMember(Name = "EngagementRef", EmitDefaultValue = false)]
        public int EngagementRef { get; set; }

        /// <summary>
        /// Gets or Sets EngagementDate
        /// </summary>
        [DataMember(Name = "EngagementDate", EmitDefaultValue = true)]
        public string EngagementDate { get; set; }

        /// <summary>
        /// Gets or Sets EngagementAmount
        /// </summary>
        [DataMember(Name = "EngagementAmount", EmitDefaultValue = false)]
        public double EngagementAmount { get; set; }

        /// <summary>
        /// Gets or Sets RemainingEngagementAmount
        /// </summary>
        [DataMember(Name = "RemainingEngagementAmount", EmitDefaultValue = false)]
        public double RemainingEngagementAmount { get; set; }

        /// <summary>
        /// Gets or Sets EngagementCurrencyCode
        /// </summary>
        [DataMember(Name = "EngagementCurrencyCode", EmitDefaultValue = true)]
        public string EngagementCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets EngagementType
        /// </summary>
        [DataMember(Name = "EngagementType", EmitDefaultValue = true)]
        public string EngagementType { get; set; }

        /// <summary>
        /// Gets or Sets EngagementTypeName
        /// </summary>
        [DataMember(Name = "EngagementTypeName", EmitDefaultValue = true)]
        public string EngagementTypeName { get; set; }

        /// <summary>
        /// Gets or Sets LineType
        /// </summary>
        [DataMember(Name = "LineType", EmitDefaultValue = true)]
        public string LineType { get; set; }

        /// <summary>
        /// Gets or Sets EngagementKindName
        /// </summary>
        [DataMember(Name = "EngagementKindName", EmitDefaultValue = true)]
        public string EngagementKindName { get; set; }

        /// <summary>
        /// Gets or Sets EngagementKind
        /// </summary>
        [DataMember(Name = "EngagementKind", EmitDefaultValue = true)]
        public string EngagementKind { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KlrteEngagemantMatch {\n");
            sb.Append("  AccountBranchCode: ").Append(AccountBranchCode).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  AccountSuffix: ").Append(AccountSuffix).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  RiskAmount: ").Append(RiskAmount).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  RemainingRiskAmount: ").Append(RemainingRiskAmount).Append("\n");
            sb.Append("  EngagementRef: ").Append(EngagementRef).Append("\n");
            sb.Append("  EngagementDate: ").Append(EngagementDate).Append("\n");
            sb.Append("  EngagementAmount: ").Append(EngagementAmount).Append("\n");
            sb.Append("  RemainingEngagementAmount: ").Append(RemainingEngagementAmount).Append("\n");
            sb.Append("  EngagementCurrencyCode: ").Append(EngagementCurrencyCode).Append("\n");
            sb.Append("  EngagementType: ").Append(EngagementType).Append("\n");
            sb.Append("  EngagementTypeName: ").Append(EngagementTypeName).Append("\n");
            sb.Append("  LineType: ").Append(LineType).Append("\n");
            sb.Append("  EngagementKindName: ").Append(EngagementKindName).Append("\n");
            sb.Append("  EngagementKind: ").Append(EngagementKind).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
