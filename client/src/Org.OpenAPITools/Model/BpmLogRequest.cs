/*
 * Faktoring API - Test
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BpmLogRequest
    /// </summary>
    [DataContract(Name = "BpmLogRequest")]
    public partial class BpmLogRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BpmLogRequest" /> class.
        /// </summary>
        /// <param name="olayNo">olayNo.</param>
        /// <param name="processStatus">processStatus.</param>
        /// <param name="finalInquiryStatus">finalInquiryStatus.</param>
        /// <param name="checktoguarentee">checktoguarentee.</param>
        /// <param name="musteriNo">musteriNo.</param>
        /// <param name="drawerbankcode">drawerbankcode.</param>
        /// <param name="drawerbranchcode">drawerbranchcode.</param>
        /// <param name="drawercountrycode">drawercountrycode.</param>
        /// <param name="drawertaxno">drawertaxno.</param>
        /// <param name="drawertitle">drawertitle.</param>
        /// <param name="draweroldtaxno">draweroldtaxno.</param>
        /// <param name="draweroldtitle">draweroldtitle.</param>
        /// <param name="pYbranchcode">pYbranchcode.</param>
        /// <param name="chequeNumber">chequeNumber.</param>
        /// <param name="chequeamount">chequeamount.</param>
        /// <param name="chequecurrenycode">chequecurrenycode.</param>
        /// <param name="chequevaluedate">chequevaluedate.</param>
        /// <param name="strongbearertaxno">strongbearertaxno.</param>
        /// <param name="strongbearername">strongbearername.</param>
        /// <param name="invoicedebtortaxno">invoicedebtortaxno.</param>
        /// <param name="invoicedebtortitle">invoicedebtortitle.</param>
        /// <param name="invoicedebtorcountrycode">invoicedebtorcountrycode.</param>
        /// <param name="trader">trader.</param>
        /// <param name="kKBchequestatus">kKBchequestatus.</param>
        /// <param name="queryresult">queryresult.</param>
        /// <param name="intelligencedecision">intelligencedecision.</param>
        /// <param name="approvalrejectall">approvalrejectall.</param>
        /// <param name="branchpycomment">branchpycomment.</param>
        /// <param name="intelligencecomment">intelligencecomment.</param>
        /// <param name="branchmanagercomment">branchmanagercomment.</param>
        /// <param name="allocationcomment">allocationcomment.</param>
        /// <param name="userName">userName.</param>
        /// <param name="recordstatus">recordstatus.</param>
        /// <param name="faktoringFlag">faktoringFlag.</param>
        /// <param name="flowStatus">flowStatus.</param>
        /// <param name="accountTitle">accountTitle.</param>
        /// <param name="drawwerAccountFlag">drawwerAccountFlag.</param>
        public BpmLogRequest(string olayNo = default(string), string processStatus = default(string), string finalInquiryStatus = default(string), string checktoguarentee = default(string), string musteriNo = default(string), string drawerbankcode = default(string), string drawerbranchcode = default(string), string drawercountrycode = default(string), string drawertaxno = default(string), string drawertitle = default(string), string draweroldtaxno = default(string), string draweroldtitle = default(string), string pYbranchcode = default(string), string chequeNumber = default(string), double chequeamount = default(double), string chequecurrenycode = default(string), DateTime chequevaluedate = default(DateTime), string strongbearertaxno = default(string), string strongbearername = default(string), string invoicedebtortaxno = default(string), string invoicedebtortitle = default(string), string invoicedebtorcountrycode = default(string), string trader = default(string), string kKBchequestatus = default(string), string queryresult = default(string), string intelligencedecision = default(string), string approvalrejectall = default(string), string branchpycomment = default(string), string intelligencecomment = default(string), string branchmanagercomment = default(string), string allocationcomment = default(string), string userName = default(string), string recordstatus = default(string), string faktoringFlag = default(string), int flowStatus = default(int), string accountTitle = default(string), string drawwerAccountFlag = default(string))
        {
            this.OlayNo = olayNo;
            this.ProcessStatus = processStatus;
            this.FinalInquiryStatus = finalInquiryStatus;
            this.Checktoguarentee = checktoguarentee;
            this.MusteriNo = musteriNo;
            this.Drawerbankcode = drawerbankcode;
            this.Drawerbranchcode = drawerbranchcode;
            this.Drawercountrycode = drawercountrycode;
            this.Drawertaxno = drawertaxno;
            this.Drawertitle = drawertitle;
            this.Draweroldtaxno = draweroldtaxno;
            this.Draweroldtitle = draweroldtitle;
            this.PYbranchcode = pYbranchcode;
            this.ChequeNumber = chequeNumber;
            this.Chequeamount = chequeamount;
            this.Chequecurrenycode = chequecurrenycode;
            this.Chequevaluedate = chequevaluedate;
            this.Strongbearertaxno = strongbearertaxno;
            this.Strongbearername = strongbearername;
            this.Invoicedebtortaxno = invoicedebtortaxno;
            this.Invoicedebtortitle = invoicedebtortitle;
            this.Invoicedebtorcountrycode = invoicedebtorcountrycode;
            this.Trader = trader;
            this.KKBchequestatus = kKBchequestatus;
            this.Queryresult = queryresult;
            this.Intelligencedecision = intelligencedecision;
            this.Approvalrejectall = approvalrejectall;
            this.Branchpycomment = branchpycomment;
            this.Intelligencecomment = intelligencecomment;
            this.Branchmanagercomment = branchmanagercomment;
            this.Allocationcomment = allocationcomment;
            this.UserName = userName;
            this.Recordstatus = recordstatus;
            this.FaktoringFlag = faktoringFlag;
            this.FlowStatus = flowStatus;
            this.AccountTitle = accountTitle;
            this.DrawwerAccountFlag = drawwerAccountFlag;
        }

        /// <summary>
        /// Gets or Sets OlayNo
        /// </summary>
        [DataMember(Name = "OlayNo", EmitDefaultValue = true)]
        public string OlayNo { get; set; }

        /// <summary>
        /// Gets or Sets ProcessStatus
        /// </summary>
        [DataMember(Name = "ProcessStatus", EmitDefaultValue = true)]
        public string ProcessStatus { get; set; }

        /// <summary>
        /// Gets or Sets FinalInquiryStatus
        /// </summary>
        [DataMember(Name = "FinalInquiryStatus", EmitDefaultValue = true)]
        public string FinalInquiryStatus { get; set; }

        /// <summary>
        /// Gets or Sets Checktoguarentee
        /// </summary>
        [DataMember(Name = "Checktoguarentee", EmitDefaultValue = true)]
        public string Checktoguarentee { get; set; }

        /// <summary>
        /// Gets or Sets MusteriNo
        /// </summary>
        [DataMember(Name = "MusteriNo", EmitDefaultValue = true)]
        public string MusteriNo { get; set; }

        /// <summary>
        /// Gets or Sets Drawerbankcode
        /// </summary>
        [DataMember(Name = "Drawerbankcode", EmitDefaultValue = true)]
        public string Drawerbankcode { get; set; }

        /// <summary>
        /// Gets or Sets Drawerbranchcode
        /// </summary>
        [DataMember(Name = "Drawerbranchcode", EmitDefaultValue = true)]
        public string Drawerbranchcode { get; set; }

        /// <summary>
        /// Gets or Sets Drawercountrycode
        /// </summary>
        [DataMember(Name = "Drawercountrycode", EmitDefaultValue = true)]
        public string Drawercountrycode { get; set; }

        /// <summary>
        /// Gets or Sets Drawertaxno
        /// </summary>
        [DataMember(Name = "Drawertaxno", EmitDefaultValue = true)]
        public string Drawertaxno { get; set; }

        /// <summary>
        /// Gets or Sets Drawertitle
        /// </summary>
        [DataMember(Name = "Drawertitle", EmitDefaultValue = true)]
        public string Drawertitle { get; set; }

        /// <summary>
        /// Gets or Sets Draweroldtaxno
        /// </summary>
        [DataMember(Name = "Draweroldtaxno", EmitDefaultValue = true)]
        public string Draweroldtaxno { get; set; }

        /// <summary>
        /// Gets or Sets Draweroldtitle
        /// </summary>
        [DataMember(Name = "Draweroldtitle", EmitDefaultValue = true)]
        public string Draweroldtitle { get; set; }

        /// <summary>
        /// Gets or Sets PYbranchcode
        /// </summary>
        [DataMember(Name = "PYbranchcode", EmitDefaultValue = true)]
        public string PYbranchcode { get; set; }

        /// <summary>
        /// Gets or Sets ChequeNumber
        /// </summary>
        [DataMember(Name = "ChequeNumber", EmitDefaultValue = true)]
        public string ChequeNumber { get; set; }

        /// <summary>
        /// Gets or Sets Chequeamount
        /// </summary>
        [DataMember(Name = "Chequeamount", EmitDefaultValue = false)]
        public double Chequeamount { get; set; }

        /// <summary>
        /// Gets or Sets Chequecurrenycode
        /// </summary>
        [DataMember(Name = "Chequecurrenycode", EmitDefaultValue = true)]
        public string Chequecurrenycode { get; set; }

        /// <summary>
        /// Gets or Sets Chequevaluedate
        /// </summary>
        [DataMember(Name = "Chequevaluedate", EmitDefaultValue = false)]
        public DateTime Chequevaluedate { get; set; }

        /// <summary>
        /// Gets or Sets Strongbearertaxno
        /// </summary>
        [DataMember(Name = "Strongbearertaxno", EmitDefaultValue = true)]
        public string Strongbearertaxno { get; set; }

        /// <summary>
        /// Gets or Sets Strongbearername
        /// </summary>
        [DataMember(Name = "Strongbearername", EmitDefaultValue = true)]
        public string Strongbearername { get; set; }

        /// <summary>
        /// Gets or Sets Invoicedebtortaxno
        /// </summary>
        [DataMember(Name = "Invoicedebtortaxno", EmitDefaultValue = true)]
        public string Invoicedebtortaxno { get; set; }

        /// <summary>
        /// Gets or Sets Invoicedebtortitle
        /// </summary>
        [DataMember(Name = "Invoicedebtortitle", EmitDefaultValue = true)]
        public string Invoicedebtortitle { get; set; }

        /// <summary>
        /// Gets or Sets Invoicedebtorcountrycode
        /// </summary>
        [DataMember(Name = "Invoicedebtorcountrycode", EmitDefaultValue = true)]
        public string Invoicedebtorcountrycode { get; set; }

        /// <summary>
        /// Gets or Sets Trader
        /// </summary>
        [DataMember(Name = "Trader", EmitDefaultValue = true)]
        public string Trader { get; set; }

        /// <summary>
        /// Gets or Sets KKBchequestatus
        /// </summary>
        [DataMember(Name = "KKBchequestatus", EmitDefaultValue = true)]
        public string KKBchequestatus { get; set; }

        /// <summary>
        /// Gets or Sets Queryresult
        /// </summary>
        [DataMember(Name = "Queryresult", EmitDefaultValue = true)]
        public string Queryresult { get; set; }

        /// <summary>
        /// Gets or Sets Intelligencedecision
        /// </summary>
        [DataMember(Name = "Intelligencedecision", EmitDefaultValue = true)]
        public string Intelligencedecision { get; set; }

        /// <summary>
        /// Gets or Sets Approvalrejectall
        /// </summary>
        [DataMember(Name = "Approvalrejectall", EmitDefaultValue = true)]
        public string Approvalrejectall { get; set; }

        /// <summary>
        /// Gets or Sets Branchpycomment
        /// </summary>
        [DataMember(Name = "Branchpycomment", EmitDefaultValue = true)]
        public string Branchpycomment { get; set; }

        /// <summary>
        /// Gets or Sets Intelligencecomment
        /// </summary>
        [DataMember(Name = "Intelligencecomment", EmitDefaultValue = true)]
        public string Intelligencecomment { get; set; }

        /// <summary>
        /// Gets or Sets Branchmanagercomment
        /// </summary>
        [DataMember(Name = "Branchmanagercomment", EmitDefaultValue = true)]
        public string Branchmanagercomment { get; set; }

        /// <summary>
        /// Gets or Sets Allocationcomment
        /// </summary>
        [DataMember(Name = "Allocationcomment", EmitDefaultValue = true)]
        public string Allocationcomment { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name = "UserName", EmitDefaultValue = true)]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets Recordstatus
        /// </summary>
        [DataMember(Name = "Recordstatus", EmitDefaultValue = true)]
        public string Recordstatus { get; set; }

        /// <summary>
        /// Gets or Sets FaktoringFlag
        /// </summary>
        [DataMember(Name = "FaktoringFlag", EmitDefaultValue = true)]
        public string FaktoringFlag { get; set; }

        /// <summary>
        /// Gets or Sets FlowStatus
        /// </summary>
        [DataMember(Name = "flowStatus", EmitDefaultValue = false)]
        public int FlowStatus { get; set; }

        /// <summary>
        /// Gets or Sets AccountTitle
        /// </summary>
        [DataMember(Name = "accountTitle", EmitDefaultValue = true)]
        public string AccountTitle { get; set; }

        /// <summary>
        /// Gets or Sets DrawwerAccountFlag
        /// </summary>
        [DataMember(Name = "drawwerAccountFlag", EmitDefaultValue = true)]
        public string DrawwerAccountFlag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BpmLogRequest {\n");
            sb.Append("  OlayNo: ").Append(OlayNo).Append("\n");
            sb.Append("  ProcessStatus: ").Append(ProcessStatus).Append("\n");
            sb.Append("  FinalInquiryStatus: ").Append(FinalInquiryStatus).Append("\n");
            sb.Append("  Checktoguarentee: ").Append(Checktoguarentee).Append("\n");
            sb.Append("  MusteriNo: ").Append(MusteriNo).Append("\n");
            sb.Append("  Drawerbankcode: ").Append(Drawerbankcode).Append("\n");
            sb.Append("  Drawerbranchcode: ").Append(Drawerbranchcode).Append("\n");
            sb.Append("  Drawercountrycode: ").Append(Drawercountrycode).Append("\n");
            sb.Append("  Drawertaxno: ").Append(Drawertaxno).Append("\n");
            sb.Append("  Drawertitle: ").Append(Drawertitle).Append("\n");
            sb.Append("  Draweroldtaxno: ").Append(Draweroldtaxno).Append("\n");
            sb.Append("  Draweroldtitle: ").Append(Draweroldtitle).Append("\n");
            sb.Append("  PYbranchcode: ").Append(PYbranchcode).Append("\n");
            sb.Append("  ChequeNumber: ").Append(ChequeNumber).Append("\n");
            sb.Append("  Chequeamount: ").Append(Chequeamount).Append("\n");
            sb.Append("  Chequecurrenycode: ").Append(Chequecurrenycode).Append("\n");
            sb.Append("  Chequevaluedate: ").Append(Chequevaluedate).Append("\n");
            sb.Append("  Strongbearertaxno: ").Append(Strongbearertaxno).Append("\n");
            sb.Append("  Strongbearername: ").Append(Strongbearername).Append("\n");
            sb.Append("  Invoicedebtortaxno: ").Append(Invoicedebtortaxno).Append("\n");
            sb.Append("  Invoicedebtortitle: ").Append(Invoicedebtortitle).Append("\n");
            sb.Append("  Invoicedebtorcountrycode: ").Append(Invoicedebtorcountrycode).Append("\n");
            sb.Append("  Trader: ").Append(Trader).Append("\n");
            sb.Append("  KKBchequestatus: ").Append(KKBchequestatus).Append("\n");
            sb.Append("  Queryresult: ").Append(Queryresult).Append("\n");
            sb.Append("  Intelligencedecision: ").Append(Intelligencedecision).Append("\n");
            sb.Append("  Approvalrejectall: ").Append(Approvalrejectall).Append("\n");
            sb.Append("  Branchpycomment: ").Append(Branchpycomment).Append("\n");
            sb.Append("  Intelligencecomment: ").Append(Intelligencecomment).Append("\n");
            sb.Append("  Branchmanagercomment: ").Append(Branchmanagercomment).Append("\n");
            sb.Append("  Allocationcomment: ").Append(Allocationcomment).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Recordstatus: ").Append(Recordstatus).Append("\n");
            sb.Append("  FaktoringFlag: ").Append(FaktoringFlag).Append("\n");
            sb.Append("  FlowStatus: ").Append(FlowStatus).Append("\n");
            sb.Append("  AccountTitle: ").Append(AccountTitle).Append("\n");
            sb.Append("  DrawwerAccountFlag: ").Append(DrawwerAccountFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
