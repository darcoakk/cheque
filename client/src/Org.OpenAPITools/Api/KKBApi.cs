/*
 * Faktoring API - Test
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKKBApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryAnnouncementDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>KKBCommercialRegistryAnnouncementDetailResponse</returns>
        KKBCommercialRegistryAnnouncementDetailResponse ApiV1KKBKKBCommercialRegistryAnnouncementDetailPost(KKBCommercialRegistryAnnouncementDetailRequest? kKBCommercialRegistryAnnouncementDetailRequest = default(KKBCommercialRegistryAnnouncementDetailRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryAnnouncementDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of KKBCommercialRegistryAnnouncementDetailResponse</returns>
        ApiResponse<KKBCommercialRegistryAnnouncementDetailResponse> ApiV1KKBKKBCommercialRegistryAnnouncementDetailPostWithHttpInfo(KKBCommercialRegistryAnnouncementDetailRequest? kKBCommercialRegistryAnnouncementDetailRequest = default(KKBCommercialRegistryAnnouncementDetailRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryDetailQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>KKBCommercialRegistryDetailQueryResponse</returns>
        KKBCommercialRegistryDetailQueryResponse ApiV1KKBKKBCommercialRegistryDetailQueryPost(KKBCommercialRegistryDetailQueryRequest? kKBCommercialRegistryDetailQueryRequest = default(KKBCommercialRegistryDetailQueryRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryDetailQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of KKBCommercialRegistryDetailQueryResponse</returns>
        ApiResponse<KKBCommercialRegistryDetailQueryResponse> ApiV1KKBKKBCommercialRegistryDetailQueryPostWithHttpInfo(KKBCommercialRegistryDetailQueryRequest? kKBCommercialRegistryDetailQueryRequest = default(KKBCommercialRegistryDetailQueryRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistrySummaryQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>KKBCommercialRegistrySummaryQueryResponse</returns>
        KKBCommercialRegistrySummaryQueryResponse ApiV1KKBKKBCommercialRegistrySummaryQueryPost(KKBCommercialRegistrySummaryQueryRequest? kKBCommercialRegistrySummaryQueryRequest = default(KKBCommercialRegistrySummaryQueryRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistrySummaryQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of KKBCommercialRegistrySummaryQueryResponse</returns>
        ApiResponse<KKBCommercialRegistrySummaryQueryResponse> ApiV1KKBKKBCommercialRegistrySummaryQueryPostWithHttpInfo(KKBCommercialRegistrySummaryQueryRequest? kKBCommercialRegistrySummaryQueryRequest = default(KKBCommercialRegistrySummaryQueryRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKKBApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryAnnouncementDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KKBCommercialRegistryAnnouncementDetailResponse</returns>
        System.Threading.Tasks.Task<KKBCommercialRegistryAnnouncementDetailResponse> ApiV1KKBKKBCommercialRegistryAnnouncementDetailPostAsync(KKBCommercialRegistryAnnouncementDetailRequest? kKBCommercialRegistryAnnouncementDetailRequest = default(KKBCommercialRegistryAnnouncementDetailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryAnnouncementDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KKBCommercialRegistryAnnouncementDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<KKBCommercialRegistryAnnouncementDetailResponse>> ApiV1KKBKKBCommercialRegistryAnnouncementDetailPostWithHttpInfoAsync(KKBCommercialRegistryAnnouncementDetailRequest? kKBCommercialRegistryAnnouncementDetailRequest = default(KKBCommercialRegistryAnnouncementDetailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryDetailQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KKBCommercialRegistryDetailQueryResponse</returns>
        System.Threading.Tasks.Task<KKBCommercialRegistryDetailQueryResponse> ApiV1KKBKKBCommercialRegistryDetailQueryPostAsync(KKBCommercialRegistryDetailQueryRequest? kKBCommercialRegistryDetailQueryRequest = default(KKBCommercialRegistryDetailQueryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryDetailQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KKBCommercialRegistryDetailQueryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<KKBCommercialRegistryDetailQueryResponse>> ApiV1KKBKKBCommercialRegistryDetailQueryPostWithHttpInfoAsync(KKBCommercialRegistryDetailQueryRequest? kKBCommercialRegistryDetailQueryRequest = default(KKBCommercialRegistryDetailQueryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistrySummaryQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KKBCommercialRegistrySummaryQueryResponse</returns>
        System.Threading.Tasks.Task<KKBCommercialRegistrySummaryQueryResponse> ApiV1KKBKKBCommercialRegistrySummaryQueryPostAsync(KKBCommercialRegistrySummaryQueryRequest? kKBCommercialRegistrySummaryQueryRequest = default(KKBCommercialRegistrySummaryQueryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistrySummaryQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KKBCommercialRegistrySummaryQueryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<KKBCommercialRegistrySummaryQueryResponse>> ApiV1KKBKKBCommercialRegistrySummaryQueryPostWithHttpInfoAsync(KKBCommercialRegistrySummaryQueryRequest? kKBCommercialRegistrySummaryQueryRequest = default(KKBCommercialRegistrySummaryQueryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKKBApi : IKKBApiSync, IKKBApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KKBApi : IKKBApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KKBApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KKBApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KKBApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KKBApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KKBApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KKBApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KKBApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public KKBApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryAnnouncementDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>KKBCommercialRegistryAnnouncementDetailResponse</returns>
        public KKBCommercialRegistryAnnouncementDetailResponse ApiV1KKBKKBCommercialRegistryAnnouncementDetailPost(KKBCommercialRegistryAnnouncementDetailRequest? kKBCommercialRegistryAnnouncementDetailRequest = default(KKBCommercialRegistryAnnouncementDetailRequest?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<KKBCommercialRegistryAnnouncementDetailResponse> localVarResponse = ApiV1KKBKKBCommercialRegistryAnnouncementDetailPostWithHttpInfo(kKBCommercialRegistryAnnouncementDetailRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryAnnouncementDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of KKBCommercialRegistryAnnouncementDetailResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<KKBCommercialRegistryAnnouncementDetailResponse> ApiV1KKBKKBCommercialRegistryAnnouncementDetailPostWithHttpInfo(KKBCommercialRegistryAnnouncementDetailRequest? kKBCommercialRegistryAnnouncementDetailRequest = default(KKBCommercialRegistryAnnouncementDetailRequest?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = kKBCommercialRegistryAnnouncementDetailRequest;

            localVarRequestOptions.Operation = "KKBApi.ApiV1KKBKKBCommercialRegistryAnnouncementDetailPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KKBCommercialRegistryAnnouncementDetailResponse>("/api/v1/KKB/KKBCommercialRegistryAnnouncementDetail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1KKBKKBCommercialRegistryAnnouncementDetailPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryAnnouncementDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KKBCommercialRegistryAnnouncementDetailResponse</returns>
        public async System.Threading.Tasks.Task<KKBCommercialRegistryAnnouncementDetailResponse> ApiV1KKBKKBCommercialRegistryAnnouncementDetailPostAsync(KKBCommercialRegistryAnnouncementDetailRequest? kKBCommercialRegistryAnnouncementDetailRequest = default(KKBCommercialRegistryAnnouncementDetailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<KKBCommercialRegistryAnnouncementDetailResponse> localVarResponse = await ApiV1KKBKKBCommercialRegistryAnnouncementDetailPostWithHttpInfoAsync(kKBCommercialRegistryAnnouncementDetailRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryAnnouncementDetailRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KKBCommercialRegistryAnnouncementDetailResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<KKBCommercialRegistryAnnouncementDetailResponse>> ApiV1KKBKKBCommercialRegistryAnnouncementDetailPostWithHttpInfoAsync(KKBCommercialRegistryAnnouncementDetailRequest? kKBCommercialRegistryAnnouncementDetailRequest = default(KKBCommercialRegistryAnnouncementDetailRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = kKBCommercialRegistryAnnouncementDetailRequest;

            localVarRequestOptions.Operation = "KKBApi.ApiV1KKBKKBCommercialRegistryAnnouncementDetailPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<KKBCommercialRegistryAnnouncementDetailResponse>("/api/v1/KKB/KKBCommercialRegistryAnnouncementDetail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1KKBKKBCommercialRegistryAnnouncementDetailPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryDetailQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>KKBCommercialRegistryDetailQueryResponse</returns>
        public KKBCommercialRegistryDetailQueryResponse ApiV1KKBKKBCommercialRegistryDetailQueryPost(KKBCommercialRegistryDetailQueryRequest? kKBCommercialRegistryDetailQueryRequest = default(KKBCommercialRegistryDetailQueryRequest?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<KKBCommercialRegistryDetailQueryResponse> localVarResponse = ApiV1KKBKKBCommercialRegistryDetailQueryPostWithHttpInfo(kKBCommercialRegistryDetailQueryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryDetailQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of KKBCommercialRegistryDetailQueryResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<KKBCommercialRegistryDetailQueryResponse> ApiV1KKBKKBCommercialRegistryDetailQueryPostWithHttpInfo(KKBCommercialRegistryDetailQueryRequest? kKBCommercialRegistryDetailQueryRequest = default(KKBCommercialRegistryDetailQueryRequest?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = kKBCommercialRegistryDetailQueryRequest;

            localVarRequestOptions.Operation = "KKBApi.ApiV1KKBKKBCommercialRegistryDetailQueryPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KKBCommercialRegistryDetailQueryResponse>("/api/v1/KKB/KKBCommercialRegistryDetailQuery", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1KKBKKBCommercialRegistryDetailQueryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryDetailQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KKBCommercialRegistryDetailQueryResponse</returns>
        public async System.Threading.Tasks.Task<KKBCommercialRegistryDetailQueryResponse> ApiV1KKBKKBCommercialRegistryDetailQueryPostAsync(KKBCommercialRegistryDetailQueryRequest? kKBCommercialRegistryDetailQueryRequest = default(KKBCommercialRegistryDetailQueryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<KKBCommercialRegistryDetailQueryResponse> localVarResponse = await ApiV1KKBKKBCommercialRegistryDetailQueryPostWithHttpInfoAsync(kKBCommercialRegistryDetailQueryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistryDetailQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KKBCommercialRegistryDetailQueryResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<KKBCommercialRegistryDetailQueryResponse>> ApiV1KKBKKBCommercialRegistryDetailQueryPostWithHttpInfoAsync(KKBCommercialRegistryDetailQueryRequest? kKBCommercialRegistryDetailQueryRequest = default(KKBCommercialRegistryDetailQueryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = kKBCommercialRegistryDetailQueryRequest;

            localVarRequestOptions.Operation = "KKBApi.ApiV1KKBKKBCommercialRegistryDetailQueryPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<KKBCommercialRegistryDetailQueryResponse>("/api/v1/KKB/KKBCommercialRegistryDetailQuery", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1KKBKKBCommercialRegistryDetailQueryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistrySummaryQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>KKBCommercialRegistrySummaryQueryResponse</returns>
        public KKBCommercialRegistrySummaryQueryResponse ApiV1KKBKKBCommercialRegistrySummaryQueryPost(KKBCommercialRegistrySummaryQueryRequest? kKBCommercialRegistrySummaryQueryRequest = default(KKBCommercialRegistrySummaryQueryRequest?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<KKBCommercialRegistrySummaryQueryResponse> localVarResponse = ApiV1KKBKKBCommercialRegistrySummaryQueryPostWithHttpInfo(kKBCommercialRegistrySummaryQueryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistrySummaryQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of KKBCommercialRegistrySummaryQueryResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<KKBCommercialRegistrySummaryQueryResponse> ApiV1KKBKKBCommercialRegistrySummaryQueryPostWithHttpInfo(KKBCommercialRegistrySummaryQueryRequest? kKBCommercialRegistrySummaryQueryRequest = default(KKBCommercialRegistrySummaryQueryRequest?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = kKBCommercialRegistrySummaryQueryRequest;

            localVarRequestOptions.Operation = "KKBApi.ApiV1KKBKKBCommercialRegistrySummaryQueryPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<KKBCommercialRegistrySummaryQueryResponse>("/api/v1/KKB/KKBCommercialRegistrySummaryQuery", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1KKBKKBCommercialRegistrySummaryQueryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistrySummaryQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of KKBCommercialRegistrySummaryQueryResponse</returns>
        public async System.Threading.Tasks.Task<KKBCommercialRegistrySummaryQueryResponse> ApiV1KKBKKBCommercialRegistrySummaryQueryPostAsync(KKBCommercialRegistrySummaryQueryRequest? kKBCommercialRegistrySummaryQueryRequest = default(KKBCommercialRegistrySummaryQueryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<KKBCommercialRegistrySummaryQueryResponse> localVarResponse = await ApiV1KKBKKBCommercialRegistrySummaryQueryPostWithHttpInfoAsync(kKBCommercialRegistrySummaryQueryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kKBCommercialRegistrySummaryQueryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (KKBCommercialRegistrySummaryQueryResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<KKBCommercialRegistrySummaryQueryResponse>> ApiV1KKBKKBCommercialRegistrySummaryQueryPostWithHttpInfoAsync(KKBCommercialRegistrySummaryQueryRequest? kKBCommercialRegistrySummaryQueryRequest = default(KKBCommercialRegistrySummaryQueryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = kKBCommercialRegistrySummaryQueryRequest;

            localVarRequestOptions.Operation = "KKBApi.ApiV1KKBKKBCommercialRegistrySummaryQueryPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<KKBCommercialRegistrySummaryQueryResponse>("/api/v1/KKB/KKBCommercialRegistrySummaryQuery", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1KKBKKBCommercialRegistrySummaryQueryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
